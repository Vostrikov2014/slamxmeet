//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package io.openvidu.server.stt.grpc.autogenerated;

import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors;
import com.google.protobuf.ExtensionRegistry;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessageV3;
import com.google.protobuf.Internal;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.Message;
import com.google.protobuf.MessageOrBuilder;
import com.google.protobuf.Parser;
import com.google.protobuf.ProtocolMessageEnum;
import com.google.protobuf.SingleFieldBuilderV3;
import com.google.protobuf.Timestamp;
import com.google.protobuf.TimestampOrBuilder;
import com.google.protobuf.TimestampProto;
import com.google.protobuf.UninitializedMessageException;
import com.google.protobuf.UnknownFieldSet;
import com.google.protobuf.Descriptors.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.nio.ByteBuffer;

public final class SpeechToTextDefinitions {
    private static final Descriptors.Descriptor internal_static_stt_OpenChannelRequest_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_stt_OpenChannelRequest_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_stt_OpenChannelResponse_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_stt_OpenChannelResponse_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_stt_SpeechToTextSubscriptionRequest_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_stt_SpeechToTextSubscriptionRequest_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_stt_SpeechToTextUnsubscriptionRequest_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_stt_SpeechToTextUnsubscriptionRequest_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_stt_SpeechToTextSubscriptionResponse_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_stt_SpeechToTextSubscriptionResponse_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_stt_SpeechToTextUnsubscriptionResponse_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_stt_SpeechToTextUnsubscriptionResponse_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_stt_SpeechToTextMessage_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_stt_SpeechToTextMessage_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_stt_LoadVoskModelRequest_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_stt_LoadVoskModelRequest_fieldAccessorTable;
    private static final Descriptors.Descriptor internal_static_stt_LoadVoskModelResponse_descriptor;
    private static final GeneratedMessageV3.FieldAccessorTable internal_static_stt_LoadVoskModelResponse_fieldAccessorTable;
    private static Descriptors.FileDescriptor descriptor;

    private SpeechToTextDefinitions() {
    }

    public static void registerAllExtensions(ExtensionRegistryLite registry) {
    }

    public static void registerAllExtensions(ExtensionRegistry registry) {
        registerAllExtensions((ExtensionRegistryLite)registry);
    }

    public static Descriptors.FileDescriptor getDescriptor() {
        return descriptor;
    }

    static {
        String[] descriptorData = new String[]{"\n\u0012speechtotext.proto\u0012\u0003stt\u001a\u001fgoogle/protobuf/timestamp.proto\"C\n\u0012OpenChannelRequest\u0012-\n\ttimestamp\u0018\u0001 \u0001(\u000b2\u001a.google.protobuf.Timestamp\"D\n\u0013OpenChannelResponse\u0012-\n\ttimestamp\u0018\u0001 \u0001(\u000b2\u001a.google.protobuf.Timestamp\"g\n\u001fSpeechToTextSubscriptionRequest\u0012\u0011\n\tsessionId\u0018\u0001 \u0001(\t\u0012\u0014\n\fconnectionId\u0018\u0002 \u0001(\t\u0012\r\n\u0005token\u0018\u0003 \u0001(\t\u0012\f\n\u0004lang\u0018\u0004 \u0001(\t\"Z\n!SpeechToTextUnsubscriptionRequest\u0012\u0011\n\tsessionId\u0018\u0001 \u0001(\t\u0012\u0014\n\fconnectionId\u0018\u0002 \u0001(\t\u0012\f\n\u0004lang\u0018\u0003 \u0001(\t\"z\n SpeechToTextSubscriptionResponse\u0012-\n\ttimestamp\u0018\u0001 \u0001(\u000b2\u001a.google.protobuf.Timestamp\u0012\u0011\n\tsessionId\u0018\u0002 \u0001(\t\u0012\u0014\n\fconnectionId\u0018\u0003 \u0001(\t\"|\n\"SpeechToTextUnsubscriptionResponse\u0012-\n\ttimestamp\u0018\u0001 \u0001(\u000b2\u001a.google.protobuf.Timestamp\u0012\u0011\n\tsessionId\u0018\u0002 \u0001(\t\u0012\u0014\n\fconnectionId\u0018\u0003 \u0001(\t\"Å\u0001\n\u0013SpeechToTextMessage\u0012-\n\ttimestamp\u0018\u0001 \u0001(\u000b2\u001a.google.protobuf.Timestamp\u0012\u0010\n\bstreamId\u0018\u0002 \u0001(\t\u0012\u0014\n\fconnectionId\u0018\u0003 \u0001(\t\u0012\u0011\n\tsessionId\u0018\u0004 \u0001(\t\u0012\f\n\u0004text\u0018\u0005 \u0001(\t\u0012\u001b\n\u0006reason\u0018\u0006 \u0001(\u000e2\u000b.stt.Reason\u0012\u000b\n\u0003raw\u0018\u0007 \u0001(\t\u0012\f\n\u0004lang\u0018\b \u0001(\t\"$\n\u0014LoadVoskModelRequest\u0012\f\n\u0004lang\u0018\u0001 \u0001(\t\"%\n\u0015LoadVoskModelResponse\u0012\f\n\u0004lang\u0018\u0001 \u0001(\t*)\n\u0006Reason\u0012\u000f\n\u000bRECOGNIZING\u0010\u0000\u0012\u000e\n\nRECOGNIZED\u0010\u00012Æ\u0003\n\fSpeechToText\u0012D\n\u000bOpenChannel\u0012\u0017.stt.OpenChannelRequest\u001a\u0018.stt.SpeechToTextMessage\"\u00000\u0001\u0012h\n\u0017SubscribeToSpeechToText\u0012$.stt.SpeechToTextSubscriptionRequest\u001a%.stt.SpeechToTextSubscriptionResponse\"\u0000\u0012p\n\u001bUnsubscribeFromSpeechToText\u0012&.stt.SpeechToTextUnsubscriptionRequest\u001a'.stt.SpeechToTextUnsubscriptionResponse\"\u0000\u0012H\n\rLoadVoskModel\u0012\u0019.stt.LoadVoskModelRequest\u001a\u001a.stt.LoadVoskModelResponse\"\u0000\u0012J\n\u000fUnloadVoskModel\u0012\u0019.stt.LoadVoskModelRequest\u001a\u001a.stt.LoadVoskModelResponse\"\u0000BJ\n-io.openvidu.server.pro.stt.grpc.autogeneratedB\u0017SpeechToTextDefinitionsP\u0000b\u0006proto3"};
        descriptor = FileDescriptor.internalBuildGeneratedFileFrom(descriptorData, new Descriptors.FileDescriptor[]{TimestampProto.getDescriptor()});
        internal_static_stt_OpenChannelRequest_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(0);
        internal_static_stt_OpenChannelRequest_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(internal_static_stt_OpenChannelRequest_descriptor, new String[]{"Timestamp"});
        internal_static_stt_OpenChannelResponse_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(1);
        internal_static_stt_OpenChannelResponse_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(internal_static_stt_OpenChannelResponse_descriptor, new String[]{"Timestamp"});
        internal_static_stt_SpeechToTextSubscriptionRequest_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(2);
        internal_static_stt_SpeechToTextSubscriptionRequest_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(internal_static_stt_SpeechToTextSubscriptionRequest_descriptor, new String[]{"SessionId", "ConnectionId", "Token", "Lang"});
        internal_static_stt_SpeechToTextUnsubscriptionRequest_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(3);
        internal_static_stt_SpeechToTextUnsubscriptionRequest_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(internal_static_stt_SpeechToTextUnsubscriptionRequest_descriptor, new String[]{"SessionId", "ConnectionId", "Lang"});
        internal_static_stt_SpeechToTextSubscriptionResponse_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(4);
        internal_static_stt_SpeechToTextSubscriptionResponse_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(internal_static_stt_SpeechToTextSubscriptionResponse_descriptor, new String[]{"Timestamp", "SessionId", "ConnectionId"});
        internal_static_stt_SpeechToTextUnsubscriptionResponse_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(5);
        internal_static_stt_SpeechToTextUnsubscriptionResponse_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(internal_static_stt_SpeechToTextUnsubscriptionResponse_descriptor, new String[]{"Timestamp", "SessionId", "ConnectionId"});
        internal_static_stt_SpeechToTextMessage_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(6);
        internal_static_stt_SpeechToTextMessage_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(internal_static_stt_SpeechToTextMessage_descriptor, new String[]{"Timestamp", "StreamId", "ConnectionId", "SessionId", "Text", "Reason", "Raw", "Lang"});
        internal_static_stt_LoadVoskModelRequest_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(7);
        internal_static_stt_LoadVoskModelRequest_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(internal_static_stt_LoadVoskModelRequest_descriptor, new String[]{"Lang"});
        internal_static_stt_LoadVoskModelResponse_descriptor = (Descriptors.Descriptor)getDescriptor().getMessageTypes().get(8);
        internal_static_stt_LoadVoskModelResponse_fieldAccessorTable = new GeneratedMessageV3.FieldAccessorTable(internal_static_stt_LoadVoskModelResponse_descriptor, new String[]{"Lang"});
        TimestampProto.getDescriptor();
    }

    public static final class LoadVoskModelResponse extends GeneratedMessageV3 implements LoadVoskModelResponseOrBuilder {
        private static final long serialVersionUID = 0L;
        public static final int LANG_FIELD_NUMBER = 1;
        private volatile Object lang_;
        private byte memoizedIsInitialized;
        private static final LoadVoskModelResponse DEFAULT_INSTANCE = new LoadVoskModelResponse();
        private static final Parser<LoadVoskModelResponse> PARSER = new AbstractParser<LoadVoskModelResponse>() {
            public LoadVoskModelResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new LoadVoskModelResponse(input, extensionRegistry);
            }
        };

        private LoadVoskModelResponse(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
        }

        private LoadVoskModelResponse() {
            this.memoizedIsInitialized = -1;
            this.lang_ = "";
        }

        protected Object newInstance(GeneratedMessageV3.UnusedPrivateParameter unused) {
            return new LoadVoskModelResponse();
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private LoadVoskModelResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new NullPointerException();
            } else {
                UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();

                try {
                    boolean done = false;

                    while(!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            case 10:
                                String s = input.readStringRequireUtf8();
                                this.lang_ = s;
                                break;
                            default:
                                if (!this.parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                    done = true;
                                }
                        }
                    }
                } catch (InvalidProtocolBufferException var12) {
                    throw var12.setUnfinishedMessage(this);
                } catch (UninitializedMessageException var13) {
                    throw var13.asInvalidProtocolBufferException().setUnfinishedMessage(this);
                } catch (IOException var14) {
                    throw (new InvalidProtocolBufferException(var14)).setUnfinishedMessage(this);
                } finally {
                    this.unknownFields = unknownFields.build();
                    this.makeExtensionsImmutable();
                }

            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return SpeechToTextDefinitions.internal_static_stt_LoadVoskModelResponse_descriptor;
        }

        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return SpeechToTextDefinitions.internal_static_stt_LoadVoskModelResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(LoadVoskModelResponse.class, Builder.class);
        }

        public String getLang() {
            Object ref = this.lang_;
            if (ref instanceof String) {
                return (String)ref;
            } else {
                ByteString bs = (ByteString)ref;
                String s = bs.toStringUtf8();
                this.lang_ = s;
                return s;
            }
        }

        public ByteString getLangBytes() {
            Object ref = this.lang_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String)ref);
                this.lang_ = b;
                return b;
            } else {
                return (ByteString)ref;
            }
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            } else if (isInitialized == 0) {
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            if (!GeneratedMessageV3.isStringEmpty(this.lang_)) {
                GeneratedMessageV3.writeString(output, 1, this.lang_);
            }

            this.unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSize;
            if (size != -1) {
                return size;
            } else {
                size = 0;
                if (!GeneratedMessageV3.isStringEmpty(this.lang_)) {
                    size += GeneratedMessageV3.computeStringSize(1, this.lang_);
                }

                size += this.unknownFields.getSerializedSize();
                this.memoizedSize = size;
                return size;
            }
        }

        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            } else if (!(obj instanceof LoadVoskModelResponse)) {
                return super.equals(obj);
            } else {
                LoadVoskModelResponse other = (LoadVoskModelResponse)obj;
                if (!this.getLang().equals(other.getLang())) {
                    return false;
                } else {
                    return this.unknownFields.equals(other.unknownFields);
                }
            }
        }

        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            } else {
                int hash = 41;
                hash = 19 * hash + getDescriptor().hashCode();
                hash = 37 * hash + 1;
                hash = 53 * hash + this.getLang().hashCode();
                hash = 29 * hash + this.unknownFields.hashCode();
                this.memoizedHashCode = hash;
                return hash;
            }
        }

        public static LoadVoskModelResponse parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
            return (LoadVoskModelResponse)PARSER.parseFrom(data);
        }

        public static LoadVoskModelResponse parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LoadVoskModelResponse)PARSER.parseFrom(data, extensionRegistry);
        }

        public static LoadVoskModelResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (LoadVoskModelResponse)PARSER.parseFrom(data);
        }

        public static LoadVoskModelResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LoadVoskModelResponse)PARSER.parseFrom(data, extensionRegistry);
        }

        public static LoadVoskModelResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (LoadVoskModelResponse)PARSER.parseFrom(data);
        }

        public static LoadVoskModelResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LoadVoskModelResponse)PARSER.parseFrom(data, extensionRegistry);
        }

        public static LoadVoskModelResponse parseFrom(InputStream input) throws IOException {
            return (LoadVoskModelResponse)GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static LoadVoskModelResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LoadVoskModelResponse)GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static LoadVoskModelResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (LoadVoskModelResponse)GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
        }

        public static LoadVoskModelResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LoadVoskModelResponse)GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static LoadVoskModelResponse parseFrom(CodedInputStream input) throws IOException {
            return (LoadVoskModelResponse)GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static LoadVoskModelResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LoadVoskModelResponse)GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(LoadVoskModelResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
        }

        protected Builder newBuilderForType(GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static LoadVoskModelResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<LoadVoskModelResponse> parser() {
            return PARSER;
        }

        public Parser<LoadVoskModelResponse> getParserForType() {
            return PARSER;
        }

        public LoadVoskModelResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements LoadVoskModelResponseOrBuilder {
            private Object lang_ = "";

            public static final Descriptors.Descriptor getDescriptor() {
                return SpeechToTextDefinitions.internal_static_stt_LoadVoskModelResponse_descriptor;
            }

            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return SpeechToTextDefinitions.internal_static_stt_LoadVoskModelResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(LoadVoskModelResponse.class, Builder.class);
            }

            private Builder() {
                this.maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                this.maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (SpeechToTextDefinitions.LoadVoskModelResponse.alwaysUseFieldBuilders) {
                }

            }

            public Builder clear() {
                super.clear();
                this.lang_ = "";
                return this;
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return SpeechToTextDefinitions.internal_static_stt_LoadVoskModelResponse_descriptor;
            }

            public LoadVoskModelResponse getDefaultInstanceForType() {
                return SpeechToTextDefinitions.LoadVoskModelResponse.getDefaultInstance();
            }

            public LoadVoskModelResponse build() {
                LoadVoskModelResponse result = this.buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                } else {
                    return result;
                }
            }

            public LoadVoskModelResponse buildPartial() {
                LoadVoskModelResponse result = new LoadVoskModelResponse(this);
                result.lang_ = this.lang_;
                this.onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder)super.clone();
            }

            public Builder setField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder)super.setField(field, value);
            }

            public Builder clearField(Descriptors.FieldDescriptor field) {
                return (Builder)super.clearField(field);
            }

            public Builder clearOneof(Descriptors.OneofDescriptor oneof) {
                return (Builder)super.clearOneof(oneof);
            }

            public Builder setRepeatedField(Descriptors.FieldDescriptor field, int index, Object value) {
                return (Builder)super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder)super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof LoadVoskModelResponse) {
                    return this.mergeFrom((LoadVoskModelResponse)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(LoadVoskModelResponse other) {
                if (other == SpeechToTextDefinitions.LoadVoskModelResponse.getDefaultInstance()) {
                    return this;
                } else {
                    if (!other.getLang().isEmpty()) {
                        this.lang_ = other.lang_;
                        this.onChanged();
                    }

                    this.mergeUnknownFields(other.unknownFields);
                    this.onChanged();
                    return this;
                }
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                LoadVoskModelResponse parsedMessage = null;

                try {
                    parsedMessage = (LoadVoskModelResponse)SpeechToTextDefinitions.LoadVoskModelResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException var8) {
                    parsedMessage = (LoadVoskModelResponse)var8.getUnfinishedMessage();
                    throw var8.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        this.mergeFrom(parsedMessage);
                    }

                }

                return this;
            }

            public String getLang() {
                Object ref = this.lang_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString)ref;
                    String s = bs.toStringUtf8();
                    this.lang_ = s;
                    return s;
                } else {
                    return (String)ref;
                }
            }

            public ByteString getLangBytes() {
                Object ref = this.lang_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String)ref);
                    this.lang_ = b;
                    return b;
                } else {
                    return (ByteString)ref;
                }
            }

            public Builder setLang(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    this.lang_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public Builder clearLang() {
                this.lang_ = SpeechToTextDefinitions.LoadVoskModelResponse.getDefaultInstance().getLang();
                this.onChanged();
                return this;
            }

            public Builder setLangBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    SpeechToTextDefinitions.LoadVoskModelResponse.checkByteStringIsUtf8(value);
                    this.lang_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public final Builder setUnknownFields(UnknownFieldSet unknownFields) {
                return (Builder)super.setUnknownFields(unknownFields);
            }

            public final Builder mergeUnknownFields(UnknownFieldSet unknownFields) {
                return (Builder)super.mergeUnknownFields(unknownFields);
            }
        }
    }

    public interface LoadVoskModelResponseOrBuilder extends MessageOrBuilder {
        String getLang();

        ByteString getLangBytes();
    }

    public static final class LoadVoskModelRequest extends GeneratedMessageV3 implements LoadVoskModelRequestOrBuilder {
        private static final long serialVersionUID = 0L;
        public static final int LANG_FIELD_NUMBER = 1;
        private volatile Object lang_;
        private byte memoizedIsInitialized;
        private static final LoadVoskModelRequest DEFAULT_INSTANCE = new LoadVoskModelRequest();
        private static final Parser<LoadVoskModelRequest> PARSER = new AbstractParser<LoadVoskModelRequest>() {
            public LoadVoskModelRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new LoadVoskModelRequest(input, extensionRegistry);
            }
        };

        private LoadVoskModelRequest(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
        }

        private LoadVoskModelRequest() {
            this.memoizedIsInitialized = -1;
            this.lang_ = "";
        }

        protected Object newInstance(GeneratedMessageV3.UnusedPrivateParameter unused) {
            return new LoadVoskModelRequest();
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private LoadVoskModelRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new NullPointerException();
            } else {
                UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();

                try {
                    boolean done = false;

                    while(!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            case 10:
                                String s = input.readStringRequireUtf8();
                                this.lang_ = s;
                                break;
                            default:
                                if (!this.parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                    done = true;
                                }
                        }
                    }
                } catch (InvalidProtocolBufferException var12) {
                    throw var12.setUnfinishedMessage(this);
                } catch (UninitializedMessageException var13) {
                    throw var13.asInvalidProtocolBufferException().setUnfinishedMessage(this);
                } catch (IOException var14) {
                    throw (new InvalidProtocolBufferException(var14)).setUnfinishedMessage(this);
                } finally {
                    this.unknownFields = unknownFields.build();
                    this.makeExtensionsImmutable();
                }

            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return SpeechToTextDefinitions.internal_static_stt_LoadVoskModelRequest_descriptor;
        }

        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return SpeechToTextDefinitions.internal_static_stt_LoadVoskModelRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(LoadVoskModelRequest.class, Builder.class);
        }

        public String getLang() {
            Object ref = this.lang_;
            if (ref instanceof String) {
                return (String)ref;
            } else {
                ByteString bs = (ByteString)ref;
                String s = bs.toStringUtf8();
                this.lang_ = s;
                return s;
            }
        }

        public ByteString getLangBytes() {
            Object ref = this.lang_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String)ref);
                this.lang_ = b;
                return b;
            } else {
                return (ByteString)ref;
            }
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            } else if (isInitialized == 0) {
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            if (!GeneratedMessageV3.isStringEmpty(this.lang_)) {
                GeneratedMessageV3.writeString(output, 1, this.lang_);
            }

            this.unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSize;
            if (size != -1) {
                return size;
            } else {
                size = 0;
                if (!GeneratedMessageV3.isStringEmpty(this.lang_)) {
                    size += GeneratedMessageV3.computeStringSize(1, this.lang_);
                }

                size += this.unknownFields.getSerializedSize();
                this.memoizedSize = size;
                return size;
            }
        }

        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            } else if (!(obj instanceof LoadVoskModelRequest)) {
                return super.equals(obj);
            } else {
                LoadVoskModelRequest other = (LoadVoskModelRequest)obj;
                if (!this.getLang().equals(other.getLang())) {
                    return false;
                } else {
                    return this.unknownFields.equals(other.unknownFields);
                }
            }
        }

        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            } else {
                int hash = 41;
                hash = 19 * hash + getDescriptor().hashCode();
                hash = 37 * hash + 1;
                hash = 53 * hash + this.getLang().hashCode();
                hash = 29 * hash + this.unknownFields.hashCode();
                this.memoizedHashCode = hash;
                return hash;
            }
        }

        public static LoadVoskModelRequest parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
            return (LoadVoskModelRequest)PARSER.parseFrom(data);
        }

        public static LoadVoskModelRequest parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LoadVoskModelRequest)PARSER.parseFrom(data, extensionRegistry);
        }

        public static LoadVoskModelRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (LoadVoskModelRequest)PARSER.parseFrom(data);
        }

        public static LoadVoskModelRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LoadVoskModelRequest)PARSER.parseFrom(data, extensionRegistry);
        }

        public static LoadVoskModelRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (LoadVoskModelRequest)PARSER.parseFrom(data);
        }

        public static LoadVoskModelRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (LoadVoskModelRequest)PARSER.parseFrom(data, extensionRegistry);
        }

        public static LoadVoskModelRequest parseFrom(InputStream input) throws IOException {
            return (LoadVoskModelRequest)GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static LoadVoskModelRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LoadVoskModelRequest)GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static LoadVoskModelRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (LoadVoskModelRequest)GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
        }

        public static LoadVoskModelRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LoadVoskModelRequest)GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static LoadVoskModelRequest parseFrom(CodedInputStream input) throws IOException {
            return (LoadVoskModelRequest)GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static LoadVoskModelRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (LoadVoskModelRequest)GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(LoadVoskModelRequest prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
        }

        protected Builder newBuilderForType(GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static LoadVoskModelRequest getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<LoadVoskModelRequest> parser() {
            return PARSER;
        }

        public Parser<LoadVoskModelRequest> getParserForType() {
            return PARSER;
        }

        public LoadVoskModelRequest getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements LoadVoskModelRequestOrBuilder {
            private Object lang_ = "";

            public static final Descriptors.Descriptor getDescriptor() {
                return SpeechToTextDefinitions.internal_static_stt_LoadVoskModelRequest_descriptor;
            }

            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return SpeechToTextDefinitions.internal_static_stt_LoadVoskModelRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(LoadVoskModelRequest.class, Builder.class);
            }

            private Builder() {
                this.maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                this.maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (SpeechToTextDefinitions.LoadVoskModelRequest.alwaysUseFieldBuilders) {
                }

            }

            public Builder clear() {
                super.clear();
                this.lang_ = "";
                return this;
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return SpeechToTextDefinitions.internal_static_stt_LoadVoskModelRequest_descriptor;
            }

            public LoadVoskModelRequest getDefaultInstanceForType() {
                return SpeechToTextDefinitions.LoadVoskModelRequest.getDefaultInstance();
            }

            public LoadVoskModelRequest build() {
                LoadVoskModelRequest result = this.buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                } else {
                    return result;
                }
            }

            public LoadVoskModelRequest buildPartial() {
                LoadVoskModelRequest result = new LoadVoskModelRequest(this);
                result.lang_ = this.lang_;
                this.onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder)super.clone();
            }

            public Builder setField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder)super.setField(field, value);
            }

            public Builder clearField(Descriptors.FieldDescriptor field) {
                return (Builder)super.clearField(field);
            }

            public Builder clearOneof(Descriptors.OneofDescriptor oneof) {
                return (Builder)super.clearOneof(oneof);
            }

            public Builder setRepeatedField(Descriptors.FieldDescriptor field, int index, Object value) {
                return (Builder)super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder)super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof LoadVoskModelRequest) {
                    return this.mergeFrom((LoadVoskModelRequest)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(LoadVoskModelRequest other) {
                if (other == SpeechToTextDefinitions.LoadVoskModelRequest.getDefaultInstance()) {
                    return this;
                } else {
                    if (!other.getLang().isEmpty()) {
                        this.lang_ = other.lang_;
                        this.onChanged();
                    }

                    this.mergeUnknownFields(other.unknownFields);
                    this.onChanged();
                    return this;
                }
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                LoadVoskModelRequest parsedMessage = null;

                try {
                    parsedMessage = (LoadVoskModelRequest)SpeechToTextDefinitions.LoadVoskModelRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException var8) {
                    parsedMessage = (LoadVoskModelRequest)var8.getUnfinishedMessage();
                    throw var8.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        this.mergeFrom(parsedMessage);
                    }

                }

                return this;
            }

            public String getLang() {
                Object ref = this.lang_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString)ref;
                    String s = bs.toStringUtf8();
                    this.lang_ = s;
                    return s;
                } else {
                    return (String)ref;
                }
            }

            public ByteString getLangBytes() {
                Object ref = this.lang_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String)ref);
                    this.lang_ = b;
                    return b;
                } else {
                    return (ByteString)ref;
                }
            }

            public Builder setLang(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    this.lang_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public Builder clearLang() {
                this.lang_ = SpeechToTextDefinitions.LoadVoskModelRequest.getDefaultInstance().getLang();
                this.onChanged();
                return this;
            }

            public Builder setLangBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    SpeechToTextDefinitions.LoadVoskModelRequest.checkByteStringIsUtf8(value);
                    this.lang_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public final Builder setUnknownFields(UnknownFieldSet unknownFields) {
                return (Builder)super.setUnknownFields(unknownFields);
            }

            public final Builder mergeUnknownFields(UnknownFieldSet unknownFields) {
                return (Builder)super.mergeUnknownFields(unknownFields);
            }
        }
    }

    public interface LoadVoskModelRequestOrBuilder extends MessageOrBuilder {
        String getLang();

        ByteString getLangBytes();
    }

    public static final class SpeechToTextMessage extends GeneratedMessageV3 implements SpeechToTextMessageOrBuilder {
        private static final long serialVersionUID = 0L;
        public static final int TIMESTAMP_FIELD_NUMBER = 1;
        private Timestamp timestamp_;
        public static final int STREAMID_FIELD_NUMBER = 2;
        private volatile Object streamId_;
        public static final int CONNECTIONID_FIELD_NUMBER = 3;
        private volatile Object connectionId_;
        public static final int SESSIONID_FIELD_NUMBER = 4;
        private volatile Object sessionId_;
        public static final int TEXT_FIELD_NUMBER = 5;
        private volatile Object text_;
        public static final int REASON_FIELD_NUMBER = 6;
        private int reason_;
        public static final int RAW_FIELD_NUMBER = 7;
        private volatile Object raw_;
        public static final int LANG_FIELD_NUMBER = 8;
        private volatile Object lang_;
        private byte memoizedIsInitialized;
        private static final SpeechToTextMessage DEFAULT_INSTANCE = new SpeechToTextMessage();
        private static final Parser<SpeechToTextMessage> PARSER = new AbstractParser<SpeechToTextMessage>() {
            public SpeechToTextMessage parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new SpeechToTextMessage(input, extensionRegistry);
            }
        };

        private SpeechToTextMessage(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
        }

        private SpeechToTextMessage() {
            this.memoizedIsInitialized = -1;
            this.streamId_ = "";
            this.connectionId_ = "";
            this.sessionId_ = "";
            this.text_ = "";
            this.reason_ = 0;
            this.raw_ = "";
            this.lang_ = "";
        }

        protected Object newInstance(GeneratedMessageV3.UnusedPrivateParameter unused) {
            return new SpeechToTextMessage();
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SpeechToTextMessage(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new NullPointerException();
            } else {
                UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();

                try {
                    boolean done = false;

                    while(!done) {
                        int tag = input.readTag();
                        String s;
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            case 10:
                                Timestamp.Builder subBuilder = null;
                                if (this.timestamp_ != null) {
                                    subBuilder = this.timestamp_.toBuilder();
                                }

                                this.timestamp_ = (Timestamp)input.readMessage(Timestamp.parser(), extensionRegistry);
                                if (subBuilder != null) {
                                    subBuilder.mergeFrom(this.timestamp_);
                                    this.timestamp_ = subBuilder.buildPartial();
                                }
                                break;
                            case 18:
                                s = input.readStringRequireUtf8();
                                this.streamId_ = s;
                                break;
                            case 26:
                                s = input.readStringRequireUtf8();
                                this.connectionId_ = s;
                                break;
                            case 34:
                                s = input.readStringRequireUtf8();
                                this.sessionId_ = s;
                                break;
                            case 42:
                                s = input.readStringRequireUtf8();
                                this.text_ = s;
                                break;
                            case 48:
                                int rawValue = input.readEnum();
                                this.reason_ = rawValue;
                                break;
                            case 58:
                                s = input.readStringRequireUtf8();
                                this.raw_ = s;
                                break;
                            case 66:
                                s = input.readStringRequireUtf8();
                                this.lang_ = s;
                                break;
                            default:
                                if (!this.parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                    done = true;
                                }
                        }
                    }
                } catch (InvalidProtocolBufferException var12) {
                    throw var12.setUnfinishedMessage(this);
                } catch (UninitializedMessageException var13) {
                    throw var13.asInvalidProtocolBufferException().setUnfinishedMessage(this);
                } catch (IOException var14) {
                    throw (new InvalidProtocolBufferException(var14)).setUnfinishedMessage(this);
                } finally {
                    this.unknownFields = unknownFields.build();
                    this.makeExtensionsImmutable();
                }

            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return SpeechToTextDefinitions.internal_static_stt_SpeechToTextMessage_descriptor;
        }

        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return SpeechToTextDefinitions.internal_static_stt_SpeechToTextMessage_fieldAccessorTable.ensureFieldAccessorsInitialized(SpeechToTextMessage.class, Builder.class);
        }

        public boolean hasTimestamp() {
            return this.timestamp_ != null;
        }

        public Timestamp getTimestamp() {
            return this.timestamp_ == null ? Timestamp.getDefaultInstance() : this.timestamp_;
        }

        public TimestampOrBuilder getTimestampOrBuilder() {
            return this.getTimestamp();
        }

        public String getStreamId() {
            Object ref = this.streamId_;
            if (ref instanceof String) {
                return (String)ref;
            } else {
                ByteString bs = (ByteString)ref;
                String s = bs.toStringUtf8();
                this.streamId_ = s;
                return s;
            }
        }

        public ByteString getStreamIdBytes() {
            Object ref = this.streamId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String)ref);
                this.streamId_ = b;
                return b;
            } else {
                return (ByteString)ref;
            }
        }

        public String getConnectionId() {
            Object ref = this.connectionId_;
            if (ref instanceof String) {
                return (String)ref;
            } else {
                ByteString bs = (ByteString)ref;
                String s = bs.toStringUtf8();
                this.connectionId_ = s;
                return s;
            }
        }

        public ByteString getConnectionIdBytes() {
            Object ref = this.connectionId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String)ref);
                this.connectionId_ = b;
                return b;
            } else {
                return (ByteString)ref;
            }
        }

        public String getSessionId() {
            Object ref = this.sessionId_;
            if (ref instanceof String) {
                return (String)ref;
            } else {
                ByteString bs = (ByteString)ref;
                String s = bs.toStringUtf8();
                this.sessionId_ = s;
                return s;
            }
        }

        public ByteString getSessionIdBytes() {
            Object ref = this.sessionId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String)ref);
                this.sessionId_ = b;
                return b;
            } else {
                return (ByteString)ref;
            }
        }

        public String getText() {
            Object ref = this.text_;
            if (ref instanceof String) {
                return (String)ref;
            } else {
                ByteString bs = (ByteString)ref;
                String s = bs.toStringUtf8();
                this.text_ = s;
                return s;
            }
        }

        public ByteString getTextBytes() {
            Object ref = this.text_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String)ref);
                this.text_ = b;
                return b;
            } else {
                return (ByteString)ref;
            }
        }

        public int getReasonValue() {
            return this.reason_;
        }

        public Reason getReason() {
            Reason result = SpeechToTextDefinitions.Reason.valueOf(this.reason_);
            return result == null ? SpeechToTextDefinitions.Reason.UNRECOGNIZED : result;
        }

        public String getRaw() {
            Object ref = this.raw_;
            if (ref instanceof String) {
                return (String)ref;
            } else {
                ByteString bs = (ByteString)ref;
                String s = bs.toStringUtf8();
                this.raw_ = s;
                return s;
            }
        }

        public ByteString getRawBytes() {
            Object ref = this.raw_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String)ref);
                this.raw_ = b;
                return b;
            } else {
                return (ByteString)ref;
            }
        }

        public String getLang() {
            Object ref = this.lang_;
            if (ref instanceof String) {
                return (String)ref;
            } else {
                ByteString bs = (ByteString)ref;
                String s = bs.toStringUtf8();
                this.lang_ = s;
                return s;
            }
        }

        public ByteString getLangBytes() {
            Object ref = this.lang_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String)ref);
                this.lang_ = b;
                return b;
            } else {
                return (ByteString)ref;
            }
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            } else if (isInitialized == 0) {
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            if (this.timestamp_ != null) {
                output.writeMessage(1, this.getTimestamp());
            }

            if (!GeneratedMessageV3.isStringEmpty(this.streamId_)) {
                GeneratedMessageV3.writeString(output, 2, this.streamId_);
            }

            if (!GeneratedMessageV3.isStringEmpty(this.connectionId_)) {
                GeneratedMessageV3.writeString(output, 3, this.connectionId_);
            }

            if (!GeneratedMessageV3.isStringEmpty(this.sessionId_)) {
                GeneratedMessageV3.writeString(output, 4, this.sessionId_);
            }

            if (!GeneratedMessageV3.isStringEmpty(this.text_)) {
                GeneratedMessageV3.writeString(output, 5, this.text_);
            }

            if (this.reason_ != SpeechToTextDefinitions.Reason.RECOGNIZING.getNumber()) {
                output.writeEnum(6, this.reason_);
            }

            if (!GeneratedMessageV3.isStringEmpty(this.raw_)) {
                GeneratedMessageV3.writeString(output, 7, this.raw_);
            }

            if (!GeneratedMessageV3.isStringEmpty(this.lang_)) {
                GeneratedMessageV3.writeString(output, 8, this.lang_);
            }

            this.unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSize;
            if (size != -1) {
                return size;
            } else {
                size = 0;
                if (this.timestamp_ != null) {
                    size += CodedOutputStream.computeMessageSize(1, this.getTimestamp());
                }

                if (!GeneratedMessageV3.isStringEmpty(this.streamId_)) {
                    size += GeneratedMessageV3.computeStringSize(2, this.streamId_);
                }

                if (!GeneratedMessageV3.isStringEmpty(this.connectionId_)) {
                    size += GeneratedMessageV3.computeStringSize(3, this.connectionId_);
                }

                if (!GeneratedMessageV3.isStringEmpty(this.sessionId_)) {
                    size += GeneratedMessageV3.computeStringSize(4, this.sessionId_);
                }

                if (!GeneratedMessageV3.isStringEmpty(this.text_)) {
                    size += GeneratedMessageV3.computeStringSize(5, this.text_);
                }

                if (this.reason_ != SpeechToTextDefinitions.Reason.RECOGNIZING.getNumber()) {
                    size += CodedOutputStream.computeEnumSize(6, this.reason_);
                }

                if (!GeneratedMessageV3.isStringEmpty(this.raw_)) {
                    size += GeneratedMessageV3.computeStringSize(7, this.raw_);
                }

                if (!GeneratedMessageV3.isStringEmpty(this.lang_)) {
                    size += GeneratedMessageV3.computeStringSize(8, this.lang_);
                }

                size += this.unknownFields.getSerializedSize();
                this.memoizedSize = size;
                return size;
            }
        }

        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            } else if (!(obj instanceof SpeechToTextMessage)) {
                return super.equals(obj);
            } else {
                SpeechToTextMessage other = (SpeechToTextMessage)obj;
                if (this.hasTimestamp() != other.hasTimestamp()) {
                    return false;
                } else if (this.hasTimestamp() && !this.getTimestamp().equals(other.getTimestamp())) {
                    return false;
                } else if (!this.getStreamId().equals(other.getStreamId())) {
                    return false;
                } else if (!this.getConnectionId().equals(other.getConnectionId())) {
                    return false;
                } else if (!this.getSessionId().equals(other.getSessionId())) {
                    return false;
                } else if (!this.getText().equals(other.getText())) {
                    return false;
                } else if (this.reason_ != other.reason_) {
                    return false;
                } else if (!this.getRaw().equals(other.getRaw())) {
                    return false;
                } else if (!this.getLang().equals(other.getLang())) {
                    return false;
                } else {
                    return this.unknownFields.equals(other.unknownFields);
                }
            }
        }

        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            } else {
                int hash = 41;
                hash = 19 * hash + getDescriptor().hashCode();
                if (this.hasTimestamp()) {
                    hash = 37 * hash + 1;
                    hash = 53 * hash + this.getTimestamp().hashCode();
                }

                hash = 37 * hash + 2;
                hash = 53 * hash + this.getStreamId().hashCode();
                hash = 37 * hash + 3;
                hash = 53 * hash + this.getConnectionId().hashCode();
                hash = 37 * hash + 4;
                hash = 53 * hash + this.getSessionId().hashCode();
                hash = 37 * hash + 5;
                hash = 53 * hash + this.getText().hashCode();
                hash = 37 * hash + 6;
                hash = 53 * hash + this.reason_;
                hash = 37 * hash + 7;
                hash = 53 * hash + this.getRaw().hashCode();
                hash = 37 * hash + 8;
                hash = 53 * hash + this.getLang().hashCode();
                hash = 29 * hash + this.unknownFields.hashCode();
                this.memoizedHashCode = hash;
                return hash;
            }
        }

        public static SpeechToTextMessage parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
            return (SpeechToTextMessage)PARSER.parseFrom(data);
        }

        public static SpeechToTextMessage parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SpeechToTextMessage)PARSER.parseFrom(data, extensionRegistry);
        }

        public static SpeechToTextMessage parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SpeechToTextMessage)PARSER.parseFrom(data);
        }

        public static SpeechToTextMessage parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SpeechToTextMessage)PARSER.parseFrom(data, extensionRegistry);
        }

        public static SpeechToTextMessage parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SpeechToTextMessage)PARSER.parseFrom(data);
        }

        public static SpeechToTextMessage parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SpeechToTextMessage)PARSER.parseFrom(data, extensionRegistry);
        }

        public static SpeechToTextMessage parseFrom(InputStream input) throws IOException {
            return (SpeechToTextMessage)GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static SpeechToTextMessage parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SpeechToTextMessage)GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static SpeechToTextMessage parseDelimitedFrom(InputStream input) throws IOException {
            return (SpeechToTextMessage)GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
        }

        public static SpeechToTextMessage parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SpeechToTextMessage)GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static SpeechToTextMessage parseFrom(CodedInputStream input) throws IOException {
            return (SpeechToTextMessage)GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static SpeechToTextMessage parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SpeechToTextMessage)GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(SpeechToTextMessage prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
        }

        protected Builder newBuilderForType(GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static SpeechToTextMessage getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<SpeechToTextMessage> parser() {
            return PARSER;
        }

        public Parser<SpeechToTextMessage> getParserForType() {
            return PARSER;
        }

        public SpeechToTextMessage getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements SpeechToTextMessageOrBuilder {
            private Timestamp timestamp_;
            private SingleFieldBuilderV3<Timestamp, Timestamp.Builder, TimestampOrBuilder> timestampBuilder_;
            private Object streamId_ = "";
            private Object connectionId_ = "";
            private Object sessionId_ = "";
            private Object text_ = "";
            private int reason_ = 0;
            private Object raw_ = "";
            private Object lang_ = "";

            public static final Descriptors.Descriptor getDescriptor() {
                return SpeechToTextDefinitions.internal_static_stt_SpeechToTextMessage_descriptor;
            }

            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return SpeechToTextDefinitions.internal_static_stt_SpeechToTextMessage_fieldAccessorTable.ensureFieldAccessorsInitialized(SpeechToTextMessage.class, Builder.class);
            }

            private Builder() {
                this.maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                this.maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (SpeechToTextDefinitions.SpeechToTextMessage.alwaysUseFieldBuilders) {
                }

            }

            public Builder clear() {
                super.clear();
                if (this.timestampBuilder_ == null) {
                    this.timestamp_ = null;
                } else {
                    this.timestamp_ = null;
                    this.timestampBuilder_ = null;
                }

                this.streamId_ = "";
                this.connectionId_ = "";
                this.sessionId_ = "";
                this.text_ = "";
                this.reason_ = 0;
                this.raw_ = "";
                this.lang_ = "";
                return this;
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return SpeechToTextDefinitions.internal_static_stt_SpeechToTextMessage_descriptor;
            }

            public SpeechToTextMessage getDefaultInstanceForType() {
                return SpeechToTextDefinitions.SpeechToTextMessage.getDefaultInstance();
            }

            public SpeechToTextMessage build() {
                SpeechToTextMessage result = this.buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                } else {
                    return result;
                }
            }

            public SpeechToTextMessage buildPartial() {
                SpeechToTextMessage result = new SpeechToTextMessage(this);
                if (this.timestampBuilder_ == null) {
                    result.timestamp_ = this.timestamp_;
                } else {
                    result.timestamp_ = (Timestamp)this.timestampBuilder_.build();
                }

                result.streamId_ = this.streamId_;
                result.connectionId_ = this.connectionId_;
                result.sessionId_ = this.sessionId_;
                result.text_ = this.text_;
                result.reason_ = this.reason_;
                result.raw_ = this.raw_;
                result.lang_ = this.lang_;
                this.onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder)super.clone();
            }

            public Builder setField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder)super.setField(field, value);
            }

            public Builder clearField(Descriptors.FieldDescriptor field) {
                return (Builder)super.clearField(field);
            }

            public Builder clearOneof(Descriptors.OneofDescriptor oneof) {
                return (Builder)super.clearOneof(oneof);
            }

            public Builder setRepeatedField(Descriptors.FieldDescriptor field, int index, Object value) {
                return (Builder)super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder)super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof SpeechToTextMessage) {
                    return this.mergeFrom((SpeechToTextMessage)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(SpeechToTextMessage other) {
                if (other == SpeechToTextDefinitions.SpeechToTextMessage.getDefaultInstance()) {
                    return this;
                } else {
                    if (other.hasTimestamp()) {
                        this.mergeTimestamp(other.getTimestamp());
                    }

                    if (!other.getStreamId().isEmpty()) {
                        this.streamId_ = other.streamId_;
                        this.onChanged();
                    }

                    if (!other.getConnectionId().isEmpty()) {
                        this.connectionId_ = other.connectionId_;
                        this.onChanged();
                    }

                    if (!other.getSessionId().isEmpty()) {
                        this.sessionId_ = other.sessionId_;
                        this.onChanged();
                    }

                    if (!other.getText().isEmpty()) {
                        this.text_ = other.text_;
                        this.onChanged();
                    }

                    if (other.reason_ != 0) {
                        this.setReasonValue(other.getReasonValue());
                    }

                    if (!other.getRaw().isEmpty()) {
                        this.raw_ = other.raw_;
                        this.onChanged();
                    }

                    if (!other.getLang().isEmpty()) {
                        this.lang_ = other.lang_;
                        this.onChanged();
                    }

                    this.mergeUnknownFields(other.unknownFields);
                    this.onChanged();
                    return this;
                }
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                SpeechToTextMessage parsedMessage = null;

                try {
                    parsedMessage = (SpeechToTextMessage)SpeechToTextDefinitions.SpeechToTextMessage.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException var8) {
                    parsedMessage = (SpeechToTextMessage)var8.getUnfinishedMessage();
                    throw var8.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        this.mergeFrom(parsedMessage);
                    }

                }

                return this;
            }

            public boolean hasTimestamp() {
                return this.timestampBuilder_ != null || this.timestamp_ != null;
            }

            public Timestamp getTimestamp() {
                if (this.timestampBuilder_ == null) {
                    return this.timestamp_ == null ? Timestamp.getDefaultInstance() : this.timestamp_;
                } else {
                    return (Timestamp)this.timestampBuilder_.getMessage();
                }
            }

            public Builder setTimestamp(Timestamp value) {
                if (this.timestampBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }

                    this.timestamp_ = value;
                    this.onChanged();
                } else {
                    this.timestampBuilder_.setMessage(value);
                }

                return this;
            }

            public Builder setTimestamp(Timestamp.Builder builderForValue) {
                if (this.timestampBuilder_ == null) {
                    this.timestamp_ = builderForValue.build();
                    this.onChanged();
                } else {
                    this.timestampBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            public Builder mergeTimestamp(Timestamp value) {
                if (this.timestampBuilder_ == null) {
                    if (this.timestamp_ != null) {
                        this.timestamp_ = Timestamp.newBuilder(this.timestamp_).mergeFrom(value).buildPartial();
                    } else {
                        this.timestamp_ = value;
                    }

                    this.onChanged();
                } else {
                    this.timestampBuilder_.mergeFrom(value);
                }

                return this;
            }

            public Builder clearTimestamp() {
                if (this.timestampBuilder_ == null) {
                    this.timestamp_ = null;
                    this.onChanged();
                } else {
                    this.timestamp_ = null;
                    this.timestampBuilder_ = null;
                }

                return this;
            }

            public Timestamp.Builder getTimestampBuilder() {
                this.onChanged();
                return (Timestamp.Builder)this.getTimestampFieldBuilder().getBuilder();
            }

            public TimestampOrBuilder getTimestampOrBuilder() {
                if (this.timestampBuilder_ != null) {
                    return (TimestampOrBuilder)this.timestampBuilder_.getMessageOrBuilder();
                } else {
                    return this.timestamp_ == null ? Timestamp.getDefaultInstance() : this.timestamp_;
                }
            }

            private SingleFieldBuilderV3<Timestamp, Timestamp.Builder, TimestampOrBuilder> getTimestampFieldBuilder() {
                if (this.timestampBuilder_ == null) {
                    this.timestampBuilder_ = new SingleFieldBuilderV3(this.getTimestamp(), this.getParentForChildren(), this.isClean());
                    this.timestamp_ = null;
                }

                return this.timestampBuilder_;
            }

            public String getStreamId() {
                Object ref = this.streamId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString)ref;
                    String s = bs.toStringUtf8();
                    this.streamId_ = s;
                    return s;
                } else {
                    return (String)ref;
                }
            }

            public ByteString getStreamIdBytes() {
                Object ref = this.streamId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String)ref);
                    this.streamId_ = b;
                    return b;
                } else {
                    return (ByteString)ref;
                }
            }

            public Builder setStreamId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    this.streamId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public Builder clearStreamId() {
                this.streamId_ = SpeechToTextDefinitions.SpeechToTextMessage.getDefaultInstance().getStreamId();
                this.onChanged();
                return this;
            }

            public Builder setStreamIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    SpeechToTextDefinitions.SpeechToTextMessage.checkByteStringIsUtf8(value);
                    this.streamId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public String getConnectionId() {
                Object ref = this.connectionId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString)ref;
                    String s = bs.toStringUtf8();
                    this.connectionId_ = s;
                    return s;
                } else {
                    return (String)ref;
                }
            }

            public ByteString getConnectionIdBytes() {
                Object ref = this.connectionId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String)ref);
                    this.connectionId_ = b;
                    return b;
                } else {
                    return (ByteString)ref;
                }
            }

            public Builder setConnectionId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    this.connectionId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public Builder clearConnectionId() {
                this.connectionId_ = SpeechToTextDefinitions.SpeechToTextMessage.getDefaultInstance().getConnectionId();
                this.onChanged();
                return this;
            }

            public Builder setConnectionIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    SpeechToTextDefinitions.SpeechToTextMessage.checkByteStringIsUtf8(value);
                    this.connectionId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public String getSessionId() {
                Object ref = this.sessionId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString)ref;
                    String s = bs.toStringUtf8();
                    this.sessionId_ = s;
                    return s;
                } else {
                    return (String)ref;
                }
            }

            public ByteString getSessionIdBytes() {
                Object ref = this.sessionId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String)ref);
                    this.sessionId_ = b;
                    return b;
                } else {
                    return (ByteString)ref;
                }
            }

            public Builder setSessionId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    this.sessionId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public Builder clearSessionId() {
                this.sessionId_ = SpeechToTextDefinitions.SpeechToTextMessage.getDefaultInstance().getSessionId();
                this.onChanged();
                return this;
            }

            public Builder setSessionIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    SpeechToTextDefinitions.SpeechToTextMessage.checkByteStringIsUtf8(value);
                    this.sessionId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public String getText() {
                Object ref = this.text_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString)ref;
                    String s = bs.toStringUtf8();
                    this.text_ = s;
                    return s;
                } else {
                    return (String)ref;
                }
            }

            public ByteString getTextBytes() {
                Object ref = this.text_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String)ref);
                    this.text_ = b;
                    return b;
                } else {
                    return (ByteString)ref;
                }
            }

            public Builder setText(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    this.text_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public Builder clearText() {
                this.text_ = SpeechToTextDefinitions.SpeechToTextMessage.getDefaultInstance().getText();
                this.onChanged();
                return this;
            }

            public Builder setTextBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    SpeechToTextDefinitions.SpeechToTextMessage.checkByteStringIsUtf8(value);
                    this.text_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public int getReasonValue() {
                return this.reason_;
            }

            public Builder setReasonValue(int value) {
                this.reason_ = value;
                this.onChanged();
                return this;
            }

            public Reason getReason() {
                Reason result = SpeechToTextDefinitions.Reason.valueOf(this.reason_);
                return result == null ? SpeechToTextDefinitions.Reason.UNRECOGNIZED : result;
            }

            public Builder setReason(Reason value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    this.reason_ = value.getNumber();
                    this.onChanged();
                    return this;
                }
            }

            public Builder clearReason() {
                this.reason_ = 0;
                this.onChanged();
                return this;
            }

            public String getRaw() {
                Object ref = this.raw_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString)ref;
                    String s = bs.toStringUtf8();
                    this.raw_ = s;
                    return s;
                } else {
                    return (String)ref;
                }
            }

            public ByteString getRawBytes() {
                Object ref = this.raw_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String)ref);
                    this.raw_ = b;
                    return b;
                } else {
                    return (ByteString)ref;
                }
            }

            public Builder setRaw(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    this.raw_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public Builder clearRaw() {
                this.raw_ = SpeechToTextDefinitions.SpeechToTextMessage.getDefaultInstance().getRaw();
                this.onChanged();
                return this;
            }

            public Builder setRawBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    SpeechToTextDefinitions.SpeechToTextMessage.checkByteStringIsUtf8(value);
                    this.raw_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public String getLang() {
                Object ref = this.lang_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString)ref;
                    String s = bs.toStringUtf8();
                    this.lang_ = s;
                    return s;
                } else {
                    return (String)ref;
                }
            }

            public ByteString getLangBytes() {
                Object ref = this.lang_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String)ref);
                    this.lang_ = b;
                    return b;
                } else {
                    return (ByteString)ref;
                }
            }

            public Builder setLang(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    this.lang_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public Builder clearLang() {
                this.lang_ = SpeechToTextDefinitions.SpeechToTextMessage.getDefaultInstance().getLang();
                this.onChanged();
                return this;
            }

            public Builder setLangBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    SpeechToTextDefinitions.SpeechToTextMessage.checkByteStringIsUtf8(value);
                    this.lang_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public final Builder setUnknownFields(UnknownFieldSet unknownFields) {
                return (Builder)super.setUnknownFields(unknownFields);
            }

            public final Builder mergeUnknownFields(UnknownFieldSet unknownFields) {
                return (Builder)super.mergeUnknownFields(unknownFields);
            }
        }
    }

    public interface SpeechToTextMessageOrBuilder extends MessageOrBuilder {
        boolean hasTimestamp();

        Timestamp getTimestamp();

        TimestampOrBuilder getTimestampOrBuilder();

        String getStreamId();

        ByteString getStreamIdBytes();

        String getConnectionId();

        ByteString getConnectionIdBytes();

        String getSessionId();

        ByteString getSessionIdBytes();

        String getText();

        ByteString getTextBytes();

        int getReasonValue();

        Reason getReason();

        String getRaw();

        ByteString getRawBytes();

        String getLang();

        ByteString getLangBytes();
    }

    public static final class SpeechToTextUnsubscriptionResponse extends GeneratedMessageV3 implements SpeechToTextUnsubscriptionResponseOrBuilder {
        private static final long serialVersionUID = 0L;
        public static final int TIMESTAMP_FIELD_NUMBER = 1;
        private Timestamp timestamp_;
        public static final int SESSIONID_FIELD_NUMBER = 2;
        private volatile Object sessionId_;
        public static final int CONNECTIONID_FIELD_NUMBER = 3;
        private volatile Object connectionId_;
        private byte memoizedIsInitialized;
        private static final SpeechToTextUnsubscriptionResponse DEFAULT_INSTANCE = new SpeechToTextUnsubscriptionResponse();
        private static final Parser<SpeechToTextUnsubscriptionResponse> PARSER = new AbstractParser<SpeechToTextUnsubscriptionResponse>() {
            public SpeechToTextUnsubscriptionResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new SpeechToTextUnsubscriptionResponse(input, extensionRegistry);
            }
        };

        private SpeechToTextUnsubscriptionResponse(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
        }

        private SpeechToTextUnsubscriptionResponse() {
            this.memoizedIsInitialized = -1;
            this.sessionId_ = "";
            this.connectionId_ = "";
        }

        protected Object newInstance(GeneratedMessageV3.UnusedPrivateParameter unused) {
            return new SpeechToTextUnsubscriptionResponse();
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SpeechToTextUnsubscriptionResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new NullPointerException();
            } else {
                UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();

                try {
                    boolean done = false;

                    while(!done) {
                        int tag = input.readTag();
                        String s;
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            case 10:
                                Timestamp.Builder subBuilder = null;
                                if (this.timestamp_ != null) {
                                    subBuilder = this.timestamp_.toBuilder();
                                }

                                this.timestamp_ = (Timestamp)input.readMessage(Timestamp.parser(), extensionRegistry);
                                if (subBuilder != null) {
                                    subBuilder.mergeFrom(this.timestamp_);
                                    this.timestamp_ = subBuilder.buildPartial();
                                }
                                break;
                            case 18:
                                s = input.readStringRequireUtf8();
                                this.sessionId_ = s;
                                break;
                            case 26:
                                s = input.readStringRequireUtf8();
                                this.connectionId_ = s;
                                break;
                            default:
                                if (!this.parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                    done = true;
                                }
                        }
                    }
                } catch (InvalidProtocolBufferException var12) {
                    throw var12.setUnfinishedMessage(this);
                } catch (UninitializedMessageException var13) {
                    throw var13.asInvalidProtocolBufferException().setUnfinishedMessage(this);
                } catch (IOException var14) {
                    throw (new InvalidProtocolBufferException(var14)).setUnfinishedMessage(this);
                } finally {
                    this.unknownFields = unknownFields.build();
                    this.makeExtensionsImmutable();
                }

            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return SpeechToTextDefinitions.internal_static_stt_SpeechToTextUnsubscriptionResponse_descriptor;
        }

        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return SpeechToTextDefinitions.internal_static_stt_SpeechToTextUnsubscriptionResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(SpeechToTextUnsubscriptionResponse.class, Builder.class);
        }

        public boolean hasTimestamp() {
            return this.timestamp_ != null;
        }

        public Timestamp getTimestamp() {
            return this.timestamp_ == null ? Timestamp.getDefaultInstance() : this.timestamp_;
        }

        public TimestampOrBuilder getTimestampOrBuilder() {
            return this.getTimestamp();
        }

        public String getSessionId() {
            Object ref = this.sessionId_;
            if (ref instanceof String) {
                return (String)ref;
            } else {
                ByteString bs = (ByteString)ref;
                String s = bs.toStringUtf8();
                this.sessionId_ = s;
                return s;
            }
        }

        public ByteString getSessionIdBytes() {
            Object ref = this.sessionId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String)ref);
                this.sessionId_ = b;
                return b;
            } else {
                return (ByteString)ref;
            }
        }

        public String getConnectionId() {
            Object ref = this.connectionId_;
            if (ref instanceof String) {
                return (String)ref;
            } else {
                ByteString bs = (ByteString)ref;
                String s = bs.toStringUtf8();
                this.connectionId_ = s;
                return s;
            }
        }

        public ByteString getConnectionIdBytes() {
            Object ref = this.connectionId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String)ref);
                this.connectionId_ = b;
                return b;
            } else {
                return (ByteString)ref;
            }
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            } else if (isInitialized == 0) {
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            if (this.timestamp_ != null) {
                output.writeMessage(1, this.getTimestamp());
            }

            if (!GeneratedMessageV3.isStringEmpty(this.sessionId_)) {
                GeneratedMessageV3.writeString(output, 2, this.sessionId_);
            }

            if (!GeneratedMessageV3.isStringEmpty(this.connectionId_)) {
                GeneratedMessageV3.writeString(output, 3, this.connectionId_);
            }

            this.unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSize;
            if (size != -1) {
                return size;
            } else {
                size = 0;
                if (this.timestamp_ != null) {
                    size += CodedOutputStream.computeMessageSize(1, this.getTimestamp());
                }

                if (!GeneratedMessageV3.isStringEmpty(this.sessionId_)) {
                    size += GeneratedMessageV3.computeStringSize(2, this.sessionId_);
                }

                if (!GeneratedMessageV3.isStringEmpty(this.connectionId_)) {
                    size += GeneratedMessageV3.computeStringSize(3, this.connectionId_);
                }

                size += this.unknownFields.getSerializedSize();
                this.memoizedSize = size;
                return size;
            }
        }

        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            } else if (!(obj instanceof SpeechToTextUnsubscriptionResponse)) {
                return super.equals(obj);
            } else {
                SpeechToTextUnsubscriptionResponse other = (SpeechToTextUnsubscriptionResponse)obj;
                if (this.hasTimestamp() != other.hasTimestamp()) {
                    return false;
                } else if (this.hasTimestamp() && !this.getTimestamp().equals(other.getTimestamp())) {
                    return false;
                } else if (!this.getSessionId().equals(other.getSessionId())) {
                    return false;
                } else if (!this.getConnectionId().equals(other.getConnectionId())) {
                    return false;
                } else {
                    return this.unknownFields.equals(other.unknownFields);
                }
            }
        }

        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            } else {
                int hash = 41;
                hash = 19 * hash + getDescriptor().hashCode();
                if (this.hasTimestamp()) {
                    hash = 37 * hash + 1;
                    hash = 53 * hash + this.getTimestamp().hashCode();
                }

                hash = 37 * hash + 2;
                hash = 53 * hash + this.getSessionId().hashCode();
                hash = 37 * hash + 3;
                hash = 53 * hash + this.getConnectionId().hashCode();
                hash = 29 * hash + this.unknownFields.hashCode();
                this.memoizedHashCode = hash;
                return hash;
            }
        }

        public static SpeechToTextUnsubscriptionResponse parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
            return (SpeechToTextUnsubscriptionResponse)PARSER.parseFrom(data);
        }

        public static SpeechToTextUnsubscriptionResponse parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SpeechToTextUnsubscriptionResponse)PARSER.parseFrom(data, extensionRegistry);
        }

        public static SpeechToTextUnsubscriptionResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SpeechToTextUnsubscriptionResponse)PARSER.parseFrom(data);
        }

        public static SpeechToTextUnsubscriptionResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SpeechToTextUnsubscriptionResponse)PARSER.parseFrom(data, extensionRegistry);
        }

        public static SpeechToTextUnsubscriptionResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SpeechToTextUnsubscriptionResponse)PARSER.parseFrom(data);
        }

        public static SpeechToTextUnsubscriptionResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SpeechToTextUnsubscriptionResponse)PARSER.parseFrom(data, extensionRegistry);
        }

        public static SpeechToTextUnsubscriptionResponse parseFrom(InputStream input) throws IOException {
            return (SpeechToTextUnsubscriptionResponse)GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static SpeechToTextUnsubscriptionResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SpeechToTextUnsubscriptionResponse)GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static SpeechToTextUnsubscriptionResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (SpeechToTextUnsubscriptionResponse)GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
        }

        public static SpeechToTextUnsubscriptionResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SpeechToTextUnsubscriptionResponse)GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static SpeechToTextUnsubscriptionResponse parseFrom(CodedInputStream input) throws IOException {
            return (SpeechToTextUnsubscriptionResponse)GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static SpeechToTextUnsubscriptionResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SpeechToTextUnsubscriptionResponse)GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(SpeechToTextUnsubscriptionResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
        }

        protected Builder newBuilderForType(GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static SpeechToTextUnsubscriptionResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<SpeechToTextUnsubscriptionResponse> parser() {
            return PARSER;
        }

        public Parser<SpeechToTextUnsubscriptionResponse> getParserForType() {
            return PARSER;
        }

        public SpeechToTextUnsubscriptionResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements SpeechToTextUnsubscriptionResponseOrBuilder {
            private Timestamp timestamp_;
            private SingleFieldBuilderV3<Timestamp, Timestamp.Builder, TimestampOrBuilder> timestampBuilder_;
            private Object sessionId_ = "";
            private Object connectionId_ = "";

            public static final Descriptors.Descriptor getDescriptor() {
                return SpeechToTextDefinitions.internal_static_stt_SpeechToTextUnsubscriptionResponse_descriptor;
            }

            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return SpeechToTextDefinitions.internal_static_stt_SpeechToTextUnsubscriptionResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(SpeechToTextUnsubscriptionResponse.class, Builder.class);
            }

            private Builder() {
                this.maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                this.maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (SpeechToTextDefinitions.SpeechToTextUnsubscriptionResponse.alwaysUseFieldBuilders) {
                }

            }

            public Builder clear() {
                super.clear();
                if (this.timestampBuilder_ == null) {
                    this.timestamp_ = null;
                } else {
                    this.timestamp_ = null;
                    this.timestampBuilder_ = null;
                }

                this.sessionId_ = "";
                this.connectionId_ = "";
                return this;
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return SpeechToTextDefinitions.internal_static_stt_SpeechToTextUnsubscriptionResponse_descriptor;
            }

            public SpeechToTextUnsubscriptionResponse getDefaultInstanceForType() {
                return SpeechToTextDefinitions.SpeechToTextUnsubscriptionResponse.getDefaultInstance();
            }

            public SpeechToTextUnsubscriptionResponse build() {
                SpeechToTextUnsubscriptionResponse result = this.buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                } else {
                    return result;
                }
            }

            public SpeechToTextUnsubscriptionResponse buildPartial() {
                SpeechToTextUnsubscriptionResponse result = new SpeechToTextUnsubscriptionResponse(this);
                if (this.timestampBuilder_ == null) {
                    result.timestamp_ = this.timestamp_;
                } else {
                    result.timestamp_ = (Timestamp)this.timestampBuilder_.build();
                }

                result.sessionId_ = this.sessionId_;
                result.connectionId_ = this.connectionId_;
                this.onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder)super.clone();
            }

            public Builder setField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder)super.setField(field, value);
            }

            public Builder clearField(Descriptors.FieldDescriptor field) {
                return (Builder)super.clearField(field);
            }

            public Builder clearOneof(Descriptors.OneofDescriptor oneof) {
                return (Builder)super.clearOneof(oneof);
            }

            public Builder setRepeatedField(Descriptors.FieldDescriptor field, int index, Object value) {
                return (Builder)super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder)super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof SpeechToTextUnsubscriptionResponse) {
                    return this.mergeFrom((SpeechToTextUnsubscriptionResponse)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(SpeechToTextUnsubscriptionResponse other) {
                if (other == SpeechToTextDefinitions.SpeechToTextUnsubscriptionResponse.getDefaultInstance()) {
                    return this;
                } else {
                    if (other.hasTimestamp()) {
                        this.mergeTimestamp(other.getTimestamp());
                    }

                    if (!other.getSessionId().isEmpty()) {
                        this.sessionId_ = other.sessionId_;
                        this.onChanged();
                    }

                    if (!other.getConnectionId().isEmpty()) {
                        this.connectionId_ = other.connectionId_;
                        this.onChanged();
                    }

                    this.mergeUnknownFields(other.unknownFields);
                    this.onChanged();
                    return this;
                }
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                SpeechToTextUnsubscriptionResponse parsedMessage = null;

                try {
                    parsedMessage = (SpeechToTextUnsubscriptionResponse)SpeechToTextDefinitions.SpeechToTextUnsubscriptionResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException var8) {
                    parsedMessage = (SpeechToTextUnsubscriptionResponse)var8.getUnfinishedMessage();
                    throw var8.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        this.mergeFrom(parsedMessage);
                    }

                }

                return this;
            }

            public boolean hasTimestamp() {
                return this.timestampBuilder_ != null || this.timestamp_ != null;
            }

            public Timestamp getTimestamp() {
                if (this.timestampBuilder_ == null) {
                    return this.timestamp_ == null ? Timestamp.getDefaultInstance() : this.timestamp_;
                } else {
                    return (Timestamp)this.timestampBuilder_.getMessage();
                }
            }

            public Builder setTimestamp(Timestamp value) {
                if (this.timestampBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }

                    this.timestamp_ = value;
                    this.onChanged();
                } else {
                    this.timestampBuilder_.setMessage(value);
                }

                return this;
            }

            public Builder setTimestamp(Timestamp.Builder builderForValue) {
                if (this.timestampBuilder_ == null) {
                    this.timestamp_ = builderForValue.build();
                    this.onChanged();
                } else {
                    this.timestampBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            public Builder mergeTimestamp(Timestamp value) {
                if (this.timestampBuilder_ == null) {
                    if (this.timestamp_ != null) {
                        this.timestamp_ = Timestamp.newBuilder(this.timestamp_).mergeFrom(value).buildPartial();
                    } else {
                        this.timestamp_ = value;
                    }

                    this.onChanged();
                } else {
                    this.timestampBuilder_.mergeFrom(value);
                }

                return this;
            }

            public Builder clearTimestamp() {
                if (this.timestampBuilder_ == null) {
                    this.timestamp_ = null;
                    this.onChanged();
                } else {
                    this.timestamp_ = null;
                    this.timestampBuilder_ = null;
                }

                return this;
            }

            public Timestamp.Builder getTimestampBuilder() {
                this.onChanged();
                return (Timestamp.Builder)this.getTimestampFieldBuilder().getBuilder();
            }

            public TimestampOrBuilder getTimestampOrBuilder() {
                if (this.timestampBuilder_ != null) {
                    return (TimestampOrBuilder)this.timestampBuilder_.getMessageOrBuilder();
                } else {
                    return this.timestamp_ == null ? Timestamp.getDefaultInstance() : this.timestamp_;
                }
            }

            private SingleFieldBuilderV3<Timestamp, Timestamp.Builder, TimestampOrBuilder> getTimestampFieldBuilder() {
                if (this.timestampBuilder_ == null) {
                    this.timestampBuilder_ = new SingleFieldBuilderV3(this.getTimestamp(), this.getParentForChildren(), this.isClean());
                    this.timestamp_ = null;
                }

                return this.timestampBuilder_;
            }

            public String getSessionId() {
                Object ref = this.sessionId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString)ref;
                    String s = bs.toStringUtf8();
                    this.sessionId_ = s;
                    return s;
                } else {
                    return (String)ref;
                }
            }

            public ByteString getSessionIdBytes() {
                Object ref = this.sessionId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String)ref);
                    this.sessionId_ = b;
                    return b;
                } else {
                    return (ByteString)ref;
                }
            }

            public Builder setSessionId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    this.sessionId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public Builder clearSessionId() {
                this.sessionId_ = SpeechToTextDefinitions.SpeechToTextUnsubscriptionResponse.getDefaultInstance().getSessionId();
                this.onChanged();
                return this;
            }

            public Builder setSessionIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    SpeechToTextDefinitions.SpeechToTextUnsubscriptionResponse.checkByteStringIsUtf8(value);
                    this.sessionId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public String getConnectionId() {
                Object ref = this.connectionId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString)ref;
                    String s = bs.toStringUtf8();
                    this.connectionId_ = s;
                    return s;
                } else {
                    return (String)ref;
                }
            }

            public ByteString getConnectionIdBytes() {
                Object ref = this.connectionId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String)ref);
                    this.connectionId_ = b;
                    return b;
                } else {
                    return (ByteString)ref;
                }
            }

            public Builder setConnectionId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    this.connectionId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public Builder clearConnectionId() {
                this.connectionId_ = SpeechToTextDefinitions.SpeechToTextUnsubscriptionResponse.getDefaultInstance().getConnectionId();
                this.onChanged();
                return this;
            }

            public Builder setConnectionIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    SpeechToTextDefinitions.SpeechToTextUnsubscriptionResponse.checkByteStringIsUtf8(value);
                    this.connectionId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public final Builder setUnknownFields(UnknownFieldSet unknownFields) {
                return (Builder)super.setUnknownFields(unknownFields);
            }

            public final Builder mergeUnknownFields(UnknownFieldSet unknownFields) {
                return (Builder)super.mergeUnknownFields(unknownFields);
            }
        }
    }

    public interface SpeechToTextUnsubscriptionResponseOrBuilder extends MessageOrBuilder {
        boolean hasTimestamp();

        Timestamp getTimestamp();

        TimestampOrBuilder getTimestampOrBuilder();

        String getSessionId();

        ByteString getSessionIdBytes();

        String getConnectionId();

        ByteString getConnectionIdBytes();
    }

    public static final class SpeechToTextSubscriptionResponse extends GeneratedMessageV3 implements SpeechToTextSubscriptionResponseOrBuilder {
        private static final long serialVersionUID = 0L;
        public static final int TIMESTAMP_FIELD_NUMBER = 1;
        private Timestamp timestamp_;
        public static final int SESSIONID_FIELD_NUMBER = 2;
        private volatile Object sessionId_;
        public static final int CONNECTIONID_FIELD_NUMBER = 3;
        private volatile Object connectionId_;
        private byte memoizedIsInitialized;
        private static final SpeechToTextSubscriptionResponse DEFAULT_INSTANCE = new SpeechToTextSubscriptionResponse();
        private static final Parser<SpeechToTextSubscriptionResponse> PARSER = new AbstractParser<SpeechToTextSubscriptionResponse>() {
            public SpeechToTextSubscriptionResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new SpeechToTextSubscriptionResponse(input, extensionRegistry);
            }
        };

        private SpeechToTextSubscriptionResponse(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
        }

        private SpeechToTextSubscriptionResponse() {
            this.memoizedIsInitialized = -1;
            this.sessionId_ = "";
            this.connectionId_ = "";
        }

        protected Object newInstance(GeneratedMessageV3.UnusedPrivateParameter unused) {
            return new SpeechToTextSubscriptionResponse();
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SpeechToTextSubscriptionResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new NullPointerException();
            } else {
                UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();

                try {
                    boolean done = false;

                    while(!done) {
                        int tag = input.readTag();
                        String s;
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            case 10:
                                Timestamp.Builder subBuilder = null;
                                if (this.timestamp_ != null) {
                                    subBuilder = this.timestamp_.toBuilder();
                                }

                                this.timestamp_ = (Timestamp)input.readMessage(Timestamp.parser(), extensionRegistry);
                                if (subBuilder != null) {
                                    subBuilder.mergeFrom(this.timestamp_);
                                    this.timestamp_ = subBuilder.buildPartial();
                                }
                                break;
                            case 18:
                                s = input.readStringRequireUtf8();
                                this.sessionId_ = s;
                                break;
                            case 26:
                                s = input.readStringRequireUtf8();
                                this.connectionId_ = s;
                                break;
                            default:
                                if (!this.parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                    done = true;
                                }
                        }
                    }
                } catch (InvalidProtocolBufferException var12) {
                    throw var12.setUnfinishedMessage(this);
                } catch (UninitializedMessageException var13) {
                    throw var13.asInvalidProtocolBufferException().setUnfinishedMessage(this);
                } catch (IOException var14) {
                    throw (new InvalidProtocolBufferException(var14)).setUnfinishedMessage(this);
                } finally {
                    this.unknownFields = unknownFields.build();
                    this.makeExtensionsImmutable();
                }

            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return SpeechToTextDefinitions.internal_static_stt_SpeechToTextSubscriptionResponse_descriptor;
        }

        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return SpeechToTextDefinitions.internal_static_stt_SpeechToTextSubscriptionResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(SpeechToTextSubscriptionResponse.class, Builder.class);
        }

        public boolean hasTimestamp() {
            return this.timestamp_ != null;
        }

        public Timestamp getTimestamp() {
            return this.timestamp_ == null ? Timestamp.getDefaultInstance() : this.timestamp_;
        }

        public TimestampOrBuilder getTimestampOrBuilder() {
            return this.getTimestamp();
        }

        public String getSessionId() {
            Object ref = this.sessionId_;
            if (ref instanceof String) {
                return (String)ref;
            } else {
                ByteString bs = (ByteString)ref;
                String s = bs.toStringUtf8();
                this.sessionId_ = s;
                return s;
            }
        }

        public ByteString getSessionIdBytes() {
            Object ref = this.sessionId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String)ref);
                this.sessionId_ = b;
                return b;
            } else {
                return (ByteString)ref;
            }
        }

        public String getConnectionId() {
            Object ref = this.connectionId_;
            if (ref instanceof String) {
                return (String)ref;
            } else {
                ByteString bs = (ByteString)ref;
                String s = bs.toStringUtf8();
                this.connectionId_ = s;
                return s;
            }
        }

        public ByteString getConnectionIdBytes() {
            Object ref = this.connectionId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String)ref);
                this.connectionId_ = b;
                return b;
            } else {
                return (ByteString)ref;
            }
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            } else if (isInitialized == 0) {
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            if (this.timestamp_ != null) {
                output.writeMessage(1, this.getTimestamp());
            }

            if (!GeneratedMessageV3.isStringEmpty(this.sessionId_)) {
                GeneratedMessageV3.writeString(output, 2, this.sessionId_);
            }

            if (!GeneratedMessageV3.isStringEmpty(this.connectionId_)) {
                GeneratedMessageV3.writeString(output, 3, this.connectionId_);
            }

            this.unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSize;
            if (size != -1) {
                return size;
            } else {
                size = 0;
                if (this.timestamp_ != null) {
                    size += CodedOutputStream.computeMessageSize(1, this.getTimestamp());
                }

                if (!GeneratedMessageV3.isStringEmpty(this.sessionId_)) {
                    size += GeneratedMessageV3.computeStringSize(2, this.sessionId_);
                }

                if (!GeneratedMessageV3.isStringEmpty(this.connectionId_)) {
                    size += GeneratedMessageV3.computeStringSize(3, this.connectionId_);
                }

                size += this.unknownFields.getSerializedSize();
                this.memoizedSize = size;
                return size;
            }
        }

        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            } else if (!(obj instanceof SpeechToTextSubscriptionResponse)) {
                return super.equals(obj);
            } else {
                SpeechToTextSubscriptionResponse other = (SpeechToTextSubscriptionResponse)obj;
                if (this.hasTimestamp() != other.hasTimestamp()) {
                    return false;
                } else if (this.hasTimestamp() && !this.getTimestamp().equals(other.getTimestamp())) {
                    return false;
                } else if (!this.getSessionId().equals(other.getSessionId())) {
                    return false;
                } else if (!this.getConnectionId().equals(other.getConnectionId())) {
                    return false;
                } else {
                    return this.unknownFields.equals(other.unknownFields);
                }
            }
        }

        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            } else {
                int hash = 41;
                hash = 19 * hash + getDescriptor().hashCode();
                if (this.hasTimestamp()) {
                    hash = 37 * hash + 1;
                    hash = 53 * hash + this.getTimestamp().hashCode();
                }

                hash = 37 * hash + 2;
                hash = 53 * hash + this.getSessionId().hashCode();
                hash = 37 * hash + 3;
                hash = 53 * hash + this.getConnectionId().hashCode();
                hash = 29 * hash + this.unknownFields.hashCode();
                this.memoizedHashCode = hash;
                return hash;
            }
        }

        public static SpeechToTextSubscriptionResponse parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
            return (SpeechToTextSubscriptionResponse)PARSER.parseFrom(data);
        }

        public static SpeechToTextSubscriptionResponse parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SpeechToTextSubscriptionResponse)PARSER.parseFrom(data, extensionRegistry);
        }

        public static SpeechToTextSubscriptionResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SpeechToTextSubscriptionResponse)PARSER.parseFrom(data);
        }

        public static SpeechToTextSubscriptionResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SpeechToTextSubscriptionResponse)PARSER.parseFrom(data, extensionRegistry);
        }

        public static SpeechToTextSubscriptionResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SpeechToTextSubscriptionResponse)PARSER.parseFrom(data);
        }

        public static SpeechToTextSubscriptionResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SpeechToTextSubscriptionResponse)PARSER.parseFrom(data, extensionRegistry);
        }

        public static SpeechToTextSubscriptionResponse parseFrom(InputStream input) throws IOException {
            return (SpeechToTextSubscriptionResponse)GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static SpeechToTextSubscriptionResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SpeechToTextSubscriptionResponse)GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static SpeechToTextSubscriptionResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (SpeechToTextSubscriptionResponse)GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
        }

        public static SpeechToTextSubscriptionResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SpeechToTextSubscriptionResponse)GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static SpeechToTextSubscriptionResponse parseFrom(CodedInputStream input) throws IOException {
            return (SpeechToTextSubscriptionResponse)GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static SpeechToTextSubscriptionResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SpeechToTextSubscriptionResponse)GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(SpeechToTextSubscriptionResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
        }

        protected Builder newBuilderForType(GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static SpeechToTextSubscriptionResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<SpeechToTextSubscriptionResponse> parser() {
            return PARSER;
        }

        public Parser<SpeechToTextSubscriptionResponse> getParserForType() {
            return PARSER;
        }

        public SpeechToTextSubscriptionResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements SpeechToTextSubscriptionResponseOrBuilder {
            private Timestamp timestamp_;
            private SingleFieldBuilderV3<Timestamp, Timestamp.Builder, TimestampOrBuilder> timestampBuilder_;
            private Object sessionId_ = "";
            private Object connectionId_ = "";

            public static final Descriptors.Descriptor getDescriptor() {
                return SpeechToTextDefinitions.internal_static_stt_SpeechToTextSubscriptionResponse_descriptor;
            }

            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return SpeechToTextDefinitions.internal_static_stt_SpeechToTextSubscriptionResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(SpeechToTextSubscriptionResponse.class, Builder.class);
            }

            private Builder() {
                this.maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                this.maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (SpeechToTextDefinitions.SpeechToTextSubscriptionResponse.alwaysUseFieldBuilders) {
                }

            }

            public Builder clear() {
                super.clear();
                if (this.timestampBuilder_ == null) {
                    this.timestamp_ = null;
                } else {
                    this.timestamp_ = null;
                    this.timestampBuilder_ = null;
                }

                this.sessionId_ = "";
                this.connectionId_ = "";
                return this;
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return SpeechToTextDefinitions.internal_static_stt_SpeechToTextSubscriptionResponse_descriptor;
            }

            public SpeechToTextSubscriptionResponse getDefaultInstanceForType() {
                return SpeechToTextDefinitions.SpeechToTextSubscriptionResponse.getDefaultInstance();
            }

            public SpeechToTextSubscriptionResponse build() {
                SpeechToTextSubscriptionResponse result = this.buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                } else {
                    return result;
                }
            }

            public SpeechToTextSubscriptionResponse buildPartial() {
                SpeechToTextSubscriptionResponse result = new SpeechToTextSubscriptionResponse(this);
                if (this.timestampBuilder_ == null) {
                    result.timestamp_ = this.timestamp_;
                } else {
                    result.timestamp_ = (Timestamp)this.timestampBuilder_.build();
                }

                result.sessionId_ = this.sessionId_;
                result.connectionId_ = this.connectionId_;
                this.onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder)super.clone();
            }

            public Builder setField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder)super.setField(field, value);
            }

            public Builder clearField(Descriptors.FieldDescriptor field) {
                return (Builder)super.clearField(field);
            }

            public Builder clearOneof(Descriptors.OneofDescriptor oneof) {
                return (Builder)super.clearOneof(oneof);
            }

            public Builder setRepeatedField(Descriptors.FieldDescriptor field, int index, Object value) {
                return (Builder)super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder)super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof SpeechToTextSubscriptionResponse) {
                    return this.mergeFrom((SpeechToTextSubscriptionResponse)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(SpeechToTextSubscriptionResponse other) {
                if (other == SpeechToTextDefinitions.SpeechToTextSubscriptionResponse.getDefaultInstance()) {
                    return this;
                } else {
                    if (other.hasTimestamp()) {
                        this.mergeTimestamp(other.getTimestamp());
                    }

                    if (!other.getSessionId().isEmpty()) {
                        this.sessionId_ = other.sessionId_;
                        this.onChanged();
                    }

                    if (!other.getConnectionId().isEmpty()) {
                        this.connectionId_ = other.connectionId_;
                        this.onChanged();
                    }

                    this.mergeUnknownFields(other.unknownFields);
                    this.onChanged();
                    return this;
                }
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                SpeechToTextSubscriptionResponse parsedMessage = null;

                try {
                    parsedMessage = (SpeechToTextSubscriptionResponse)SpeechToTextDefinitions.SpeechToTextSubscriptionResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException var8) {
                    parsedMessage = (SpeechToTextSubscriptionResponse)var8.getUnfinishedMessage();
                    throw var8.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        this.mergeFrom(parsedMessage);
                    }

                }

                return this;
            }

            public boolean hasTimestamp() {
                return this.timestampBuilder_ != null || this.timestamp_ != null;
            }

            public Timestamp getTimestamp() {
                if (this.timestampBuilder_ == null) {
                    return this.timestamp_ == null ? Timestamp.getDefaultInstance() : this.timestamp_;
                } else {
                    return (Timestamp)this.timestampBuilder_.getMessage();
                }
            }

            public Builder setTimestamp(Timestamp value) {
                if (this.timestampBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }

                    this.timestamp_ = value;
                    this.onChanged();
                } else {
                    this.timestampBuilder_.setMessage(value);
                }

                return this;
            }

            public Builder setTimestamp(Timestamp.Builder builderForValue) {
                if (this.timestampBuilder_ == null) {
                    this.timestamp_ = builderForValue.build();
                    this.onChanged();
                } else {
                    this.timestampBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            public Builder mergeTimestamp(Timestamp value) {
                if (this.timestampBuilder_ == null) {
                    if (this.timestamp_ != null) {
                        this.timestamp_ = Timestamp.newBuilder(this.timestamp_).mergeFrom(value).buildPartial();
                    } else {
                        this.timestamp_ = value;
                    }

                    this.onChanged();
                } else {
                    this.timestampBuilder_.mergeFrom(value);
                }

                return this;
            }

            public Builder clearTimestamp() {
                if (this.timestampBuilder_ == null) {
                    this.timestamp_ = null;
                    this.onChanged();
                } else {
                    this.timestamp_ = null;
                    this.timestampBuilder_ = null;
                }

                return this;
            }

            public Timestamp.Builder getTimestampBuilder() {
                this.onChanged();
                return (Timestamp.Builder)this.getTimestampFieldBuilder().getBuilder();
            }

            public TimestampOrBuilder getTimestampOrBuilder() {
                if (this.timestampBuilder_ != null) {
                    return (TimestampOrBuilder)this.timestampBuilder_.getMessageOrBuilder();
                } else {
                    return this.timestamp_ == null ? Timestamp.getDefaultInstance() : this.timestamp_;
                }
            }

            private SingleFieldBuilderV3<Timestamp, Timestamp.Builder, TimestampOrBuilder> getTimestampFieldBuilder() {
                if (this.timestampBuilder_ == null) {
                    this.timestampBuilder_ = new SingleFieldBuilderV3(this.getTimestamp(), this.getParentForChildren(), this.isClean());
                    this.timestamp_ = null;
                }

                return this.timestampBuilder_;
            }

            public String getSessionId() {
                Object ref = this.sessionId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString)ref;
                    String s = bs.toStringUtf8();
                    this.sessionId_ = s;
                    return s;
                } else {
                    return (String)ref;
                }
            }

            public ByteString getSessionIdBytes() {
                Object ref = this.sessionId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String)ref);
                    this.sessionId_ = b;
                    return b;
                } else {
                    return (ByteString)ref;
                }
            }

            public Builder setSessionId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    this.sessionId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public Builder clearSessionId() {
                this.sessionId_ = SpeechToTextDefinitions.SpeechToTextSubscriptionResponse.getDefaultInstance().getSessionId();
                this.onChanged();
                return this;
            }

            public Builder setSessionIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    SpeechToTextDefinitions.SpeechToTextSubscriptionResponse.checkByteStringIsUtf8(value);
                    this.sessionId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public String getConnectionId() {
                Object ref = this.connectionId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString)ref;
                    String s = bs.toStringUtf8();
                    this.connectionId_ = s;
                    return s;
                } else {
                    return (String)ref;
                }
            }

            public ByteString getConnectionIdBytes() {
                Object ref = this.connectionId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String)ref);
                    this.connectionId_ = b;
                    return b;
                } else {
                    return (ByteString)ref;
                }
            }

            public Builder setConnectionId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    this.connectionId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public Builder clearConnectionId() {
                this.connectionId_ = SpeechToTextDefinitions.SpeechToTextSubscriptionResponse.getDefaultInstance().getConnectionId();
                this.onChanged();
                return this;
            }

            public Builder setConnectionIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    SpeechToTextDefinitions.SpeechToTextSubscriptionResponse.checkByteStringIsUtf8(value);
                    this.connectionId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public final Builder setUnknownFields(UnknownFieldSet unknownFields) {
                return (Builder)super.setUnknownFields(unknownFields);
            }

            public final Builder mergeUnknownFields(UnknownFieldSet unknownFields) {
                return (Builder)super.mergeUnknownFields(unknownFields);
            }
        }
    }

    public interface SpeechToTextSubscriptionResponseOrBuilder extends MessageOrBuilder {
        boolean hasTimestamp();

        Timestamp getTimestamp();

        TimestampOrBuilder getTimestampOrBuilder();

        String getSessionId();

        ByteString getSessionIdBytes();

        String getConnectionId();

        ByteString getConnectionIdBytes();
    }

    public static final class SpeechToTextUnsubscriptionRequest extends GeneratedMessageV3 implements SpeechToTextUnsubscriptionRequestOrBuilder {
        private static final long serialVersionUID = 0L;
        public static final int SESSIONID_FIELD_NUMBER = 1;
        private volatile Object sessionId_;
        public static final int CONNECTIONID_FIELD_NUMBER = 2;
        private volatile Object connectionId_;
        public static final int LANG_FIELD_NUMBER = 3;
        private volatile Object lang_;
        private byte memoizedIsInitialized;
        private static final SpeechToTextUnsubscriptionRequest DEFAULT_INSTANCE = new SpeechToTextUnsubscriptionRequest();
        private static final Parser<SpeechToTextUnsubscriptionRequest> PARSER = new AbstractParser<SpeechToTextUnsubscriptionRequest>() {
            public SpeechToTextUnsubscriptionRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new SpeechToTextUnsubscriptionRequest(input, extensionRegistry);
            }
        };

        private SpeechToTextUnsubscriptionRequest(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
        }

        private SpeechToTextUnsubscriptionRequest() {
            this.memoizedIsInitialized = -1;
            this.sessionId_ = "";
            this.connectionId_ = "";
            this.lang_ = "";
        }

        protected Object newInstance(GeneratedMessageV3.UnusedPrivateParameter unused) {
            return new SpeechToTextUnsubscriptionRequest();
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SpeechToTextUnsubscriptionRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new NullPointerException();
            } else {
                UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();

                try {
                    boolean done = false;

                    while(!done) {
                        int tag = input.readTag();
                        String s;
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            case 10:
                                s = input.readStringRequireUtf8();
                                this.sessionId_ = s;
                                break;
                            case 18:
                                s = input.readStringRequireUtf8();
                                this.connectionId_ = s;
                                break;
                            case 26:
                                s = input.readStringRequireUtf8();
                                this.lang_ = s;
                                break;
                            default:
                                if (!this.parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                    done = true;
                                }
                        }
                    }
                } catch (InvalidProtocolBufferException var12) {
                    throw var12.setUnfinishedMessage(this);
                } catch (UninitializedMessageException var13) {
                    throw var13.asInvalidProtocolBufferException().setUnfinishedMessage(this);
                } catch (IOException var14) {
                    throw (new InvalidProtocolBufferException(var14)).setUnfinishedMessage(this);
                } finally {
                    this.unknownFields = unknownFields.build();
                    this.makeExtensionsImmutable();
                }

            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return SpeechToTextDefinitions.internal_static_stt_SpeechToTextUnsubscriptionRequest_descriptor;
        }

        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return SpeechToTextDefinitions.internal_static_stt_SpeechToTextUnsubscriptionRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(SpeechToTextUnsubscriptionRequest.class, Builder.class);
        }

        public String getSessionId() {
            Object ref = this.sessionId_;
            if (ref instanceof String) {
                return (String)ref;
            } else {
                ByteString bs = (ByteString)ref;
                String s = bs.toStringUtf8();
                this.sessionId_ = s;
                return s;
            }
        }

        public ByteString getSessionIdBytes() {
            Object ref = this.sessionId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String)ref);
                this.sessionId_ = b;
                return b;
            } else {
                return (ByteString)ref;
            }
        }

        public String getConnectionId() {
            Object ref = this.connectionId_;
            if (ref instanceof String) {
                return (String)ref;
            } else {
                ByteString bs = (ByteString)ref;
                String s = bs.toStringUtf8();
                this.connectionId_ = s;
                return s;
            }
        }

        public ByteString getConnectionIdBytes() {
            Object ref = this.connectionId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String)ref);
                this.connectionId_ = b;
                return b;
            } else {
                return (ByteString)ref;
            }
        }

        public String getLang() {
            Object ref = this.lang_;
            if (ref instanceof String) {
                return (String)ref;
            } else {
                ByteString bs = (ByteString)ref;
                String s = bs.toStringUtf8();
                this.lang_ = s;
                return s;
            }
        }

        public ByteString getLangBytes() {
            Object ref = this.lang_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String)ref);
                this.lang_ = b;
                return b;
            } else {
                return (ByteString)ref;
            }
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            } else if (isInitialized == 0) {
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            if (!GeneratedMessageV3.isStringEmpty(this.sessionId_)) {
                GeneratedMessageV3.writeString(output, 1, this.sessionId_);
            }

            if (!GeneratedMessageV3.isStringEmpty(this.connectionId_)) {
                GeneratedMessageV3.writeString(output, 2, this.connectionId_);
            }

            if (!GeneratedMessageV3.isStringEmpty(this.lang_)) {
                GeneratedMessageV3.writeString(output, 3, this.lang_);
            }

            this.unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSize;
            if (size != -1) {
                return size;
            } else {
                size = 0;
                if (!GeneratedMessageV3.isStringEmpty(this.sessionId_)) {
                    size += GeneratedMessageV3.computeStringSize(1, this.sessionId_);
                }

                if (!GeneratedMessageV3.isStringEmpty(this.connectionId_)) {
                    size += GeneratedMessageV3.computeStringSize(2, this.connectionId_);
                }

                if (!GeneratedMessageV3.isStringEmpty(this.lang_)) {
                    size += GeneratedMessageV3.computeStringSize(3, this.lang_);
                }

                size += this.unknownFields.getSerializedSize();
                this.memoizedSize = size;
                return size;
            }
        }

        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            } else if (!(obj instanceof SpeechToTextUnsubscriptionRequest)) {
                return super.equals(obj);
            } else {
                SpeechToTextUnsubscriptionRequest other = (SpeechToTextUnsubscriptionRequest)obj;
                if (!this.getSessionId().equals(other.getSessionId())) {
                    return false;
                } else if (!this.getConnectionId().equals(other.getConnectionId())) {
                    return false;
                } else if (!this.getLang().equals(other.getLang())) {
                    return false;
                } else {
                    return this.unknownFields.equals(other.unknownFields);
                }
            }
        }

        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            } else {
                int hash = 41;
                hash = 19 * hash + getDescriptor().hashCode();
                hash = 37 * hash + 1;
                hash = 53 * hash + this.getSessionId().hashCode();
                hash = 37 * hash + 2;
                hash = 53 * hash + this.getConnectionId().hashCode();
                hash = 37 * hash + 3;
                hash = 53 * hash + this.getLang().hashCode();
                hash = 29 * hash + this.unknownFields.hashCode();
                this.memoizedHashCode = hash;
                return hash;
            }
        }

        public static SpeechToTextUnsubscriptionRequest parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
            return (SpeechToTextUnsubscriptionRequest)PARSER.parseFrom(data);
        }

        public static SpeechToTextUnsubscriptionRequest parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SpeechToTextUnsubscriptionRequest)PARSER.parseFrom(data, extensionRegistry);
        }

        public static SpeechToTextUnsubscriptionRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SpeechToTextUnsubscriptionRequest)PARSER.parseFrom(data);
        }

        public static SpeechToTextUnsubscriptionRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SpeechToTextUnsubscriptionRequest)PARSER.parseFrom(data, extensionRegistry);
        }

        public static SpeechToTextUnsubscriptionRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SpeechToTextUnsubscriptionRequest)PARSER.parseFrom(data);
        }

        public static SpeechToTextUnsubscriptionRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SpeechToTextUnsubscriptionRequest)PARSER.parseFrom(data, extensionRegistry);
        }

        public static SpeechToTextUnsubscriptionRequest parseFrom(InputStream input) throws IOException {
            return (SpeechToTextUnsubscriptionRequest)GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static SpeechToTextUnsubscriptionRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SpeechToTextUnsubscriptionRequest)GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static SpeechToTextUnsubscriptionRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (SpeechToTextUnsubscriptionRequest)GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
        }

        public static SpeechToTextUnsubscriptionRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SpeechToTextUnsubscriptionRequest)GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static SpeechToTextUnsubscriptionRequest parseFrom(CodedInputStream input) throws IOException {
            return (SpeechToTextUnsubscriptionRequest)GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static SpeechToTextUnsubscriptionRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SpeechToTextUnsubscriptionRequest)GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(SpeechToTextUnsubscriptionRequest prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
        }

        protected Builder newBuilderForType(GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static SpeechToTextUnsubscriptionRequest getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<SpeechToTextUnsubscriptionRequest> parser() {
            return PARSER;
        }

        public Parser<SpeechToTextUnsubscriptionRequest> getParserForType() {
            return PARSER;
        }

        public SpeechToTextUnsubscriptionRequest getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements SpeechToTextUnsubscriptionRequestOrBuilder {
            private Object sessionId_ = "";
            private Object connectionId_ = "";
            private Object lang_ = "";

            public static final Descriptors.Descriptor getDescriptor() {
                return SpeechToTextDefinitions.internal_static_stt_SpeechToTextUnsubscriptionRequest_descriptor;
            }

            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return SpeechToTextDefinitions.internal_static_stt_SpeechToTextUnsubscriptionRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(SpeechToTextUnsubscriptionRequest.class, Builder.class);
            }

            private Builder() {
                this.maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                this.maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (SpeechToTextDefinitions.SpeechToTextUnsubscriptionRequest.alwaysUseFieldBuilders) {
                }

            }

            public Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.connectionId_ = "";
                this.lang_ = "";
                return this;
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return SpeechToTextDefinitions.internal_static_stt_SpeechToTextUnsubscriptionRequest_descriptor;
            }

            public SpeechToTextUnsubscriptionRequest getDefaultInstanceForType() {
                return SpeechToTextDefinitions.SpeechToTextUnsubscriptionRequest.getDefaultInstance();
            }

            public SpeechToTextUnsubscriptionRequest build() {
                SpeechToTextUnsubscriptionRequest result = this.buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                } else {
                    return result;
                }
            }

            public SpeechToTextUnsubscriptionRequest buildPartial() {
                SpeechToTextUnsubscriptionRequest result = new SpeechToTextUnsubscriptionRequest(this);
                result.sessionId_ = this.sessionId_;
                result.connectionId_ = this.connectionId_;
                result.lang_ = this.lang_;
                this.onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder)super.clone();
            }

            public Builder setField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder)super.setField(field, value);
            }

            public Builder clearField(Descriptors.FieldDescriptor field) {
                return (Builder)super.clearField(field);
            }

            public Builder clearOneof(Descriptors.OneofDescriptor oneof) {
                return (Builder)super.clearOneof(oneof);
            }

            public Builder setRepeatedField(Descriptors.FieldDescriptor field, int index, Object value) {
                return (Builder)super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder)super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof SpeechToTextUnsubscriptionRequest) {
                    return this.mergeFrom((SpeechToTextUnsubscriptionRequest)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(SpeechToTextUnsubscriptionRequest other) {
                if (other == SpeechToTextDefinitions.SpeechToTextUnsubscriptionRequest.getDefaultInstance()) {
                    return this;
                } else {
                    if (!other.getSessionId().isEmpty()) {
                        this.sessionId_ = other.sessionId_;
                        this.onChanged();
                    }

                    if (!other.getConnectionId().isEmpty()) {
                        this.connectionId_ = other.connectionId_;
                        this.onChanged();
                    }

                    if (!other.getLang().isEmpty()) {
                        this.lang_ = other.lang_;
                        this.onChanged();
                    }

                    this.mergeUnknownFields(other.unknownFields);
                    this.onChanged();
                    return this;
                }
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                SpeechToTextUnsubscriptionRequest parsedMessage = null;

                try {
                    parsedMessage = (SpeechToTextUnsubscriptionRequest)SpeechToTextDefinitions.SpeechToTextUnsubscriptionRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException var8) {
                    parsedMessage = (SpeechToTextUnsubscriptionRequest)var8.getUnfinishedMessage();
                    throw var8.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        this.mergeFrom(parsedMessage);
                    }

                }

                return this;
            }

            public String getSessionId() {
                Object ref = this.sessionId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString)ref;
                    String s = bs.toStringUtf8();
                    this.sessionId_ = s;
                    return s;
                } else {
                    return (String)ref;
                }
            }

            public ByteString getSessionIdBytes() {
                Object ref = this.sessionId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String)ref);
                    this.sessionId_ = b;
                    return b;
                } else {
                    return (ByteString)ref;
                }
            }

            public Builder setSessionId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    this.sessionId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public Builder clearSessionId() {
                this.sessionId_ = SpeechToTextDefinitions.SpeechToTextUnsubscriptionRequest.getDefaultInstance().getSessionId();
                this.onChanged();
                return this;
            }

            public Builder setSessionIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    SpeechToTextDefinitions.SpeechToTextUnsubscriptionRequest.checkByteStringIsUtf8(value);
                    this.sessionId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public String getConnectionId() {
                Object ref = this.connectionId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString)ref;
                    String s = bs.toStringUtf8();
                    this.connectionId_ = s;
                    return s;
                } else {
                    return (String)ref;
                }
            }

            public ByteString getConnectionIdBytes() {
                Object ref = this.connectionId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String)ref);
                    this.connectionId_ = b;
                    return b;
                } else {
                    return (ByteString)ref;
                }
            }

            public Builder setConnectionId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    this.connectionId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public Builder clearConnectionId() {
                this.connectionId_ = SpeechToTextDefinitions.SpeechToTextUnsubscriptionRequest.getDefaultInstance().getConnectionId();
                this.onChanged();
                return this;
            }

            public Builder setConnectionIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    SpeechToTextDefinitions.SpeechToTextUnsubscriptionRequest.checkByteStringIsUtf8(value);
                    this.connectionId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public String getLang() {
                Object ref = this.lang_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString)ref;
                    String s = bs.toStringUtf8();
                    this.lang_ = s;
                    return s;
                } else {
                    return (String)ref;
                }
            }

            public ByteString getLangBytes() {
                Object ref = this.lang_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String)ref);
                    this.lang_ = b;
                    return b;
                } else {
                    return (ByteString)ref;
                }
            }

            public Builder setLang(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    this.lang_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public Builder clearLang() {
                this.lang_ = SpeechToTextDefinitions.SpeechToTextUnsubscriptionRequest.getDefaultInstance().getLang();
                this.onChanged();
                return this;
            }

            public Builder setLangBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    SpeechToTextDefinitions.SpeechToTextUnsubscriptionRequest.checkByteStringIsUtf8(value);
                    this.lang_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public final Builder setUnknownFields(UnknownFieldSet unknownFields) {
                return (Builder)super.setUnknownFields(unknownFields);
            }

            public final Builder mergeUnknownFields(UnknownFieldSet unknownFields) {
                return (Builder)super.mergeUnknownFields(unknownFields);
            }
        }
    }

    public interface SpeechToTextUnsubscriptionRequestOrBuilder extends MessageOrBuilder {
        String getSessionId();

        ByteString getSessionIdBytes();

        String getConnectionId();

        ByteString getConnectionIdBytes();

        String getLang();

        ByteString getLangBytes();
    }

    public static final class SpeechToTextSubscriptionRequest extends GeneratedMessageV3 implements SpeechToTextSubscriptionRequestOrBuilder {
        private static final long serialVersionUID = 0L;
        public static final int SESSIONID_FIELD_NUMBER = 1;
        private volatile Object sessionId_;
        public static final int CONNECTIONID_FIELD_NUMBER = 2;
        private volatile Object connectionId_;
        public static final int TOKEN_FIELD_NUMBER = 3;
        private volatile Object token_;
        public static final int LANG_FIELD_NUMBER = 4;
        private volatile Object lang_;
        private byte memoizedIsInitialized;
        private static final SpeechToTextSubscriptionRequest DEFAULT_INSTANCE = new SpeechToTextSubscriptionRequest();
        private static final Parser<SpeechToTextSubscriptionRequest> PARSER = new AbstractParser<SpeechToTextSubscriptionRequest>() {
            public SpeechToTextSubscriptionRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new SpeechToTextSubscriptionRequest(input, extensionRegistry);
            }
        };

        private SpeechToTextSubscriptionRequest(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
        }

        private SpeechToTextSubscriptionRequest() {
            this.memoizedIsInitialized = -1;
            this.sessionId_ = "";
            this.connectionId_ = "";
            this.token_ = "";
            this.lang_ = "";
        }

        protected Object newInstance(GeneratedMessageV3.UnusedPrivateParameter unused) {
            return new SpeechToTextSubscriptionRequest();
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SpeechToTextSubscriptionRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new NullPointerException();
            } else {
                UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();

                try {
                    boolean done = false;

                    while(!done) {
                        int tag = input.readTag();
                        String s;
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            case 10:
                                s = input.readStringRequireUtf8();
                                this.sessionId_ = s;
                                break;
                            case 18:
                                s = input.readStringRequireUtf8();
                                this.connectionId_ = s;
                                break;
                            case 26:
                                s = input.readStringRequireUtf8();
                                this.token_ = s;
                                break;
                            case 34:
                                s = input.readStringRequireUtf8();
                                this.lang_ = s;
                                break;
                            default:
                                if (!this.parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                    done = true;
                                }
                        }
                    }
                } catch (InvalidProtocolBufferException var12) {
                    throw var12.setUnfinishedMessage(this);
                } catch (UninitializedMessageException var13) {
                    throw var13.asInvalidProtocolBufferException().setUnfinishedMessage(this);
                } catch (IOException var14) {
                    throw (new InvalidProtocolBufferException(var14)).setUnfinishedMessage(this);
                } finally {
                    this.unknownFields = unknownFields.build();
                    this.makeExtensionsImmutable();
                }

            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return SpeechToTextDefinitions.internal_static_stt_SpeechToTextSubscriptionRequest_descriptor;
        }

        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return SpeechToTextDefinitions.internal_static_stt_SpeechToTextSubscriptionRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(SpeechToTextSubscriptionRequest.class, Builder.class);
        }

        public String getSessionId() {
            Object ref = this.sessionId_;
            if (ref instanceof String) {
                return (String)ref;
            } else {
                ByteString bs = (ByteString)ref;
                String s = bs.toStringUtf8();
                this.sessionId_ = s;
                return s;
            }
        }

        public ByteString getSessionIdBytes() {
            Object ref = this.sessionId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String)ref);
                this.sessionId_ = b;
                return b;
            } else {
                return (ByteString)ref;
            }
        }

        public String getConnectionId() {
            Object ref = this.connectionId_;
            if (ref instanceof String) {
                return (String)ref;
            } else {
                ByteString bs = (ByteString)ref;
                String s = bs.toStringUtf8();
                this.connectionId_ = s;
                return s;
            }
        }

        public ByteString getConnectionIdBytes() {
            Object ref = this.connectionId_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String)ref);
                this.connectionId_ = b;
                return b;
            } else {
                return (ByteString)ref;
            }
        }

        public String getToken() {
            Object ref = this.token_;
            if (ref instanceof String) {
                return (String)ref;
            } else {
                ByteString bs = (ByteString)ref;
                String s = bs.toStringUtf8();
                this.token_ = s;
                return s;
            }
        }

        public ByteString getTokenBytes() {
            Object ref = this.token_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String)ref);
                this.token_ = b;
                return b;
            } else {
                return (ByteString)ref;
            }
        }

        public String getLang() {
            Object ref = this.lang_;
            if (ref instanceof String) {
                return (String)ref;
            } else {
                ByteString bs = (ByteString)ref;
                String s = bs.toStringUtf8();
                this.lang_ = s;
                return s;
            }
        }

        public ByteString getLangBytes() {
            Object ref = this.lang_;
            if (ref instanceof String) {
                ByteString b = ByteString.copyFromUtf8((String)ref);
                this.lang_ = b;
                return b;
            } else {
                return (ByteString)ref;
            }
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            } else if (isInitialized == 0) {
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            if (!GeneratedMessageV3.isStringEmpty(this.sessionId_)) {
                GeneratedMessageV3.writeString(output, 1, this.sessionId_);
            }

            if (!GeneratedMessageV3.isStringEmpty(this.connectionId_)) {
                GeneratedMessageV3.writeString(output, 2, this.connectionId_);
            }

            if (!GeneratedMessageV3.isStringEmpty(this.token_)) {
                GeneratedMessageV3.writeString(output, 3, this.token_);
            }

            if (!GeneratedMessageV3.isStringEmpty(this.lang_)) {
                GeneratedMessageV3.writeString(output, 4, this.lang_);
            }

            this.unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSize;
            if (size != -1) {
                return size;
            } else {
                size = 0;
                if (!GeneratedMessageV3.isStringEmpty(this.sessionId_)) {
                    size += GeneratedMessageV3.computeStringSize(1, this.sessionId_);
                }

                if (!GeneratedMessageV3.isStringEmpty(this.connectionId_)) {
                    size += GeneratedMessageV3.computeStringSize(2, this.connectionId_);
                }

                if (!GeneratedMessageV3.isStringEmpty(this.token_)) {
                    size += GeneratedMessageV3.computeStringSize(3, this.token_);
                }

                if (!GeneratedMessageV3.isStringEmpty(this.lang_)) {
                    size += GeneratedMessageV3.computeStringSize(4, this.lang_);
                }

                size += this.unknownFields.getSerializedSize();
                this.memoizedSize = size;
                return size;
            }
        }

        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            } else if (!(obj instanceof SpeechToTextSubscriptionRequest)) {
                return super.equals(obj);
            } else {
                SpeechToTextSubscriptionRequest other = (SpeechToTextSubscriptionRequest)obj;
                if (!this.getSessionId().equals(other.getSessionId())) {
                    return false;
                } else if (!this.getConnectionId().equals(other.getConnectionId())) {
                    return false;
                } else if (!this.getToken().equals(other.getToken())) {
                    return false;
                } else if (!this.getLang().equals(other.getLang())) {
                    return false;
                } else {
                    return this.unknownFields.equals(other.unknownFields);
                }
            }
        }

        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            } else {
                int hash = 41;
                hash = 19 * hash + getDescriptor().hashCode();
                hash = 37 * hash + 1;
                hash = 53 * hash + this.getSessionId().hashCode();
                hash = 37 * hash + 2;
                hash = 53 * hash + this.getConnectionId().hashCode();
                hash = 37 * hash + 3;
                hash = 53 * hash + this.getToken().hashCode();
                hash = 37 * hash + 4;
                hash = 53 * hash + this.getLang().hashCode();
                hash = 29 * hash + this.unknownFields.hashCode();
                this.memoizedHashCode = hash;
                return hash;
            }
        }

        public static SpeechToTextSubscriptionRequest parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
            return (SpeechToTextSubscriptionRequest)PARSER.parseFrom(data);
        }

        public static SpeechToTextSubscriptionRequest parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SpeechToTextSubscriptionRequest)PARSER.parseFrom(data, extensionRegistry);
        }

        public static SpeechToTextSubscriptionRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (SpeechToTextSubscriptionRequest)PARSER.parseFrom(data);
        }

        public static SpeechToTextSubscriptionRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SpeechToTextSubscriptionRequest)PARSER.parseFrom(data, extensionRegistry);
        }

        public static SpeechToTextSubscriptionRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (SpeechToTextSubscriptionRequest)PARSER.parseFrom(data);
        }

        public static SpeechToTextSubscriptionRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (SpeechToTextSubscriptionRequest)PARSER.parseFrom(data, extensionRegistry);
        }

        public static SpeechToTextSubscriptionRequest parseFrom(InputStream input) throws IOException {
            return (SpeechToTextSubscriptionRequest)GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static SpeechToTextSubscriptionRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SpeechToTextSubscriptionRequest)GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static SpeechToTextSubscriptionRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (SpeechToTextSubscriptionRequest)GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
        }

        public static SpeechToTextSubscriptionRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SpeechToTextSubscriptionRequest)GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static SpeechToTextSubscriptionRequest parseFrom(CodedInputStream input) throws IOException {
            return (SpeechToTextSubscriptionRequest)GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static SpeechToTextSubscriptionRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (SpeechToTextSubscriptionRequest)GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(SpeechToTextSubscriptionRequest prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
        }

        protected Builder newBuilderForType(GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static SpeechToTextSubscriptionRequest getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<SpeechToTextSubscriptionRequest> parser() {
            return PARSER;
        }

        public Parser<SpeechToTextSubscriptionRequest> getParserForType() {
            return PARSER;
        }

        public SpeechToTextSubscriptionRequest getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements SpeechToTextSubscriptionRequestOrBuilder {
            private Object sessionId_ = "";
            private Object connectionId_ = "";
            private Object token_ = "";
            private Object lang_ = "";

            public static final Descriptors.Descriptor getDescriptor() {
                return SpeechToTextDefinitions.internal_static_stt_SpeechToTextSubscriptionRequest_descriptor;
            }

            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return SpeechToTextDefinitions.internal_static_stt_SpeechToTextSubscriptionRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(SpeechToTextSubscriptionRequest.class, Builder.class);
            }

            private Builder() {
                this.maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                this.maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (SpeechToTextDefinitions.SpeechToTextSubscriptionRequest.alwaysUseFieldBuilders) {
                }

            }

            public Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.connectionId_ = "";
                this.token_ = "";
                this.lang_ = "";
                return this;
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return SpeechToTextDefinitions.internal_static_stt_SpeechToTextSubscriptionRequest_descriptor;
            }

            public SpeechToTextSubscriptionRequest getDefaultInstanceForType() {
                return SpeechToTextDefinitions.SpeechToTextSubscriptionRequest.getDefaultInstance();
            }

            public SpeechToTextSubscriptionRequest build() {
                SpeechToTextSubscriptionRequest result = this.buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                } else {
                    return result;
                }
            }

            public SpeechToTextSubscriptionRequest buildPartial() {
                SpeechToTextSubscriptionRequest result = new SpeechToTextSubscriptionRequest(this);
                result.sessionId_ = this.sessionId_;
                result.connectionId_ = this.connectionId_;
                result.token_ = this.token_;
                result.lang_ = this.lang_;
                this.onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder)super.clone();
            }

            public Builder setField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder)super.setField(field, value);
            }

            public Builder clearField(Descriptors.FieldDescriptor field) {
                return (Builder)super.clearField(field);
            }

            public Builder clearOneof(Descriptors.OneofDescriptor oneof) {
                return (Builder)super.clearOneof(oneof);
            }

            public Builder setRepeatedField(Descriptors.FieldDescriptor field, int index, Object value) {
                return (Builder)super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder)super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof SpeechToTextSubscriptionRequest) {
                    return this.mergeFrom((SpeechToTextSubscriptionRequest)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(SpeechToTextSubscriptionRequest other) {
                if (other == SpeechToTextDefinitions.SpeechToTextSubscriptionRequest.getDefaultInstance()) {
                    return this;
                } else {
                    if (!other.getSessionId().isEmpty()) {
                        this.sessionId_ = other.sessionId_;
                        this.onChanged();
                    }

                    if (!other.getConnectionId().isEmpty()) {
                        this.connectionId_ = other.connectionId_;
                        this.onChanged();
                    }

                    if (!other.getToken().isEmpty()) {
                        this.token_ = other.token_;
                        this.onChanged();
                    }

                    if (!other.getLang().isEmpty()) {
                        this.lang_ = other.lang_;
                        this.onChanged();
                    }

                    this.mergeUnknownFields(other.unknownFields);
                    this.onChanged();
                    return this;
                }
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                SpeechToTextSubscriptionRequest parsedMessage = null;

                try {
                    parsedMessage = (SpeechToTextSubscriptionRequest)SpeechToTextDefinitions.SpeechToTextSubscriptionRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException var8) {
                    parsedMessage = (SpeechToTextSubscriptionRequest)var8.getUnfinishedMessage();
                    throw var8.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        this.mergeFrom(parsedMessage);
                    }

                }

                return this;
            }

            public String getSessionId() {
                Object ref = this.sessionId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString)ref;
                    String s = bs.toStringUtf8();
                    this.sessionId_ = s;
                    return s;
                } else {
                    return (String)ref;
                }
            }

            public ByteString getSessionIdBytes() {
                Object ref = this.sessionId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String)ref);
                    this.sessionId_ = b;
                    return b;
                } else {
                    return (ByteString)ref;
                }
            }

            public Builder setSessionId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    this.sessionId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public Builder clearSessionId() {
                this.sessionId_ = SpeechToTextDefinitions.SpeechToTextSubscriptionRequest.getDefaultInstance().getSessionId();
                this.onChanged();
                return this;
            }

            public Builder setSessionIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    SpeechToTextDefinitions.SpeechToTextSubscriptionRequest.checkByteStringIsUtf8(value);
                    this.sessionId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public String getConnectionId() {
                Object ref = this.connectionId_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString)ref;
                    String s = bs.toStringUtf8();
                    this.connectionId_ = s;
                    return s;
                } else {
                    return (String)ref;
                }
            }

            public ByteString getConnectionIdBytes() {
                Object ref = this.connectionId_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String)ref);
                    this.connectionId_ = b;
                    return b;
                } else {
                    return (ByteString)ref;
                }
            }

            public Builder setConnectionId(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    this.connectionId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public Builder clearConnectionId() {
                this.connectionId_ = SpeechToTextDefinitions.SpeechToTextSubscriptionRequest.getDefaultInstance().getConnectionId();
                this.onChanged();
                return this;
            }

            public Builder setConnectionIdBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    SpeechToTextDefinitions.SpeechToTextSubscriptionRequest.checkByteStringIsUtf8(value);
                    this.connectionId_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public String getToken() {
                Object ref = this.token_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString)ref;
                    String s = bs.toStringUtf8();
                    this.token_ = s;
                    return s;
                } else {
                    return (String)ref;
                }
            }

            public ByteString getTokenBytes() {
                Object ref = this.token_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String)ref);
                    this.token_ = b;
                    return b;
                } else {
                    return (ByteString)ref;
                }
            }

            public Builder setToken(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    this.token_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public Builder clearToken() {
                this.token_ = SpeechToTextDefinitions.SpeechToTextSubscriptionRequest.getDefaultInstance().getToken();
                this.onChanged();
                return this;
            }

            public Builder setTokenBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    SpeechToTextDefinitions.SpeechToTextSubscriptionRequest.checkByteStringIsUtf8(value);
                    this.token_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public String getLang() {
                Object ref = this.lang_;
                if (!(ref instanceof String)) {
                    ByteString bs = (ByteString)ref;
                    String s = bs.toStringUtf8();
                    this.lang_ = s;
                    return s;
                } else {
                    return (String)ref;
                }
            }

            public ByteString getLangBytes() {
                Object ref = this.lang_;
                if (ref instanceof String) {
                    ByteString b = ByteString.copyFromUtf8((String)ref);
                    this.lang_ = b;
                    return b;
                } else {
                    return (ByteString)ref;
                }
            }

            public Builder setLang(String value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    this.lang_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public Builder clearLang() {
                this.lang_ = SpeechToTextDefinitions.SpeechToTextSubscriptionRequest.getDefaultInstance().getLang();
                this.onChanged();
                return this;
            }

            public Builder setLangBytes(ByteString value) {
                if (value == null) {
                    throw new NullPointerException();
                } else {
                    SpeechToTextDefinitions.SpeechToTextSubscriptionRequest.checkByteStringIsUtf8(value);
                    this.lang_ = value;
                    this.onChanged();
                    return this;
                }
            }

            public final Builder setUnknownFields(UnknownFieldSet unknownFields) {
                return (Builder)super.setUnknownFields(unknownFields);
            }

            public final Builder mergeUnknownFields(UnknownFieldSet unknownFields) {
                return (Builder)super.mergeUnknownFields(unknownFields);
            }
        }
    }

    public interface SpeechToTextSubscriptionRequestOrBuilder extends MessageOrBuilder {
        String getSessionId();

        ByteString getSessionIdBytes();

        String getConnectionId();

        ByteString getConnectionIdBytes();

        String getToken();

        ByteString getTokenBytes();

        String getLang();

        ByteString getLangBytes();
    }

    public static final class OpenChannelResponse extends GeneratedMessageV3 implements OpenChannelResponseOrBuilder {
        private static final long serialVersionUID = 0L;
        public static final int TIMESTAMP_FIELD_NUMBER = 1;
        private Timestamp timestamp_;
        private byte memoizedIsInitialized;
        private static final OpenChannelResponse DEFAULT_INSTANCE = new OpenChannelResponse();
        private static final Parser<OpenChannelResponse> PARSER = new AbstractParser<OpenChannelResponse>() {
            public OpenChannelResponse parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new OpenChannelResponse(input, extensionRegistry);
            }
        };

        private OpenChannelResponse(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
        }

        private OpenChannelResponse() {
            this.memoizedIsInitialized = -1;
        }

        protected Object newInstance(GeneratedMessageV3.UnusedPrivateParameter unused) {
            return new OpenChannelResponse();
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private OpenChannelResponse(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new NullPointerException();
            } else {
                UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();

                try {
                    boolean done = false;

                    while(!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            case 10:
                                Timestamp.Builder subBuilder = null;
                                if (this.timestamp_ != null) {
                                    subBuilder = this.timestamp_.toBuilder();
                                }

                                this.timestamp_ = (Timestamp)input.readMessage(Timestamp.parser(), extensionRegistry);
                                if (subBuilder != null) {
                                    subBuilder.mergeFrom(this.timestamp_);
                                    this.timestamp_ = subBuilder.buildPartial();
                                }
                                break;
                            default:
                                if (!this.parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                    done = true;
                                }
                        }
                    }
                } catch (InvalidProtocolBufferException var12) {
                    throw var12.setUnfinishedMessage(this);
                } catch (UninitializedMessageException var13) {
                    throw var13.asInvalidProtocolBufferException().setUnfinishedMessage(this);
                } catch (IOException var14) {
                    throw (new InvalidProtocolBufferException(var14)).setUnfinishedMessage(this);
                } finally {
                    this.unknownFields = unknownFields.build();
                    this.makeExtensionsImmutable();
                }

            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return SpeechToTextDefinitions.internal_static_stt_OpenChannelResponse_descriptor;
        }

        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return SpeechToTextDefinitions.internal_static_stt_OpenChannelResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(OpenChannelResponse.class, Builder.class);
        }

        public boolean hasTimestamp() {
            return this.timestamp_ != null;
        }

        public Timestamp getTimestamp() {
            return this.timestamp_ == null ? Timestamp.getDefaultInstance() : this.timestamp_;
        }

        public TimestampOrBuilder getTimestampOrBuilder() {
            return this.getTimestamp();
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            } else if (isInitialized == 0) {
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            if (this.timestamp_ != null) {
                output.writeMessage(1, this.getTimestamp());
            }

            this.unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSize;
            if (size != -1) {
                return size;
            } else {
                size = 0;
                if (this.timestamp_ != null) {
                    size += CodedOutputStream.computeMessageSize(1, this.getTimestamp());
                }

                size += this.unknownFields.getSerializedSize();
                this.memoizedSize = size;
                return size;
            }
        }

        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            } else if (!(obj instanceof OpenChannelResponse)) {
                return super.equals(obj);
            } else {
                OpenChannelResponse other = (OpenChannelResponse)obj;
                if (this.hasTimestamp() != other.hasTimestamp()) {
                    return false;
                } else if (this.hasTimestamp() && !this.getTimestamp().equals(other.getTimestamp())) {
                    return false;
                } else {
                    return this.unknownFields.equals(other.unknownFields);
                }
            }
        }

        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            } else {
                int hash = 41;
                hash = 19 * hash + getDescriptor().hashCode();
                if (this.hasTimestamp()) {
                    hash = 37 * hash + 1;
                    hash = 53 * hash + this.getTimestamp().hashCode();
                }

                hash = 29 * hash + this.unknownFields.hashCode();
                this.memoizedHashCode = hash;
                return hash;
            }
        }

        public static OpenChannelResponse parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
            return (OpenChannelResponse)PARSER.parseFrom(data);
        }

        public static OpenChannelResponse parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OpenChannelResponse)PARSER.parseFrom(data, extensionRegistry);
        }

        public static OpenChannelResponse parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (OpenChannelResponse)PARSER.parseFrom(data);
        }

        public static OpenChannelResponse parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OpenChannelResponse)PARSER.parseFrom(data, extensionRegistry);
        }

        public static OpenChannelResponse parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (OpenChannelResponse)PARSER.parseFrom(data);
        }

        public static OpenChannelResponse parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OpenChannelResponse)PARSER.parseFrom(data, extensionRegistry);
        }

        public static OpenChannelResponse parseFrom(InputStream input) throws IOException {
            return (OpenChannelResponse)GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static OpenChannelResponse parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OpenChannelResponse)GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static OpenChannelResponse parseDelimitedFrom(InputStream input) throws IOException {
            return (OpenChannelResponse)GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
        }

        public static OpenChannelResponse parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OpenChannelResponse)GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static OpenChannelResponse parseFrom(CodedInputStream input) throws IOException {
            return (OpenChannelResponse)GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static OpenChannelResponse parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OpenChannelResponse)GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(OpenChannelResponse prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
        }

        protected Builder newBuilderForType(GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static OpenChannelResponse getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<OpenChannelResponse> parser() {
            return PARSER;
        }

        public Parser<OpenChannelResponse> getParserForType() {
            return PARSER;
        }

        public OpenChannelResponse getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements OpenChannelResponseOrBuilder {
            private Timestamp timestamp_;
            private SingleFieldBuilderV3<Timestamp, Timestamp.Builder, TimestampOrBuilder> timestampBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return SpeechToTextDefinitions.internal_static_stt_OpenChannelResponse_descriptor;
            }

            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return SpeechToTextDefinitions.internal_static_stt_OpenChannelResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(OpenChannelResponse.class, Builder.class);
            }

            private Builder() {
                this.maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                this.maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (SpeechToTextDefinitions.OpenChannelResponse.alwaysUseFieldBuilders) {
                }

            }

            public Builder clear() {
                super.clear();
                if (this.timestampBuilder_ == null) {
                    this.timestamp_ = null;
                } else {
                    this.timestamp_ = null;
                    this.timestampBuilder_ = null;
                }

                return this;
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return SpeechToTextDefinitions.internal_static_stt_OpenChannelResponse_descriptor;
            }

            public OpenChannelResponse getDefaultInstanceForType() {
                return SpeechToTextDefinitions.OpenChannelResponse.getDefaultInstance();
            }

            public OpenChannelResponse build() {
                OpenChannelResponse result = this.buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                } else {
                    return result;
                }
            }

            public OpenChannelResponse buildPartial() {
                OpenChannelResponse result = new OpenChannelResponse(this);
                if (this.timestampBuilder_ == null) {
                    result.timestamp_ = this.timestamp_;
                } else {
                    result.timestamp_ = (Timestamp)this.timestampBuilder_.build();
                }

                this.onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder)super.clone();
            }

            public Builder setField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder)super.setField(field, value);
            }

            public Builder clearField(Descriptors.FieldDescriptor field) {
                return (Builder)super.clearField(field);
            }

            public Builder clearOneof(Descriptors.OneofDescriptor oneof) {
                return (Builder)super.clearOneof(oneof);
            }

            public Builder setRepeatedField(Descriptors.FieldDescriptor field, int index, Object value) {
                return (Builder)super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder)super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof OpenChannelResponse) {
                    return this.mergeFrom((OpenChannelResponse)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(OpenChannelResponse other) {
                if (other == SpeechToTextDefinitions.OpenChannelResponse.getDefaultInstance()) {
                    return this;
                } else {
                    if (other.hasTimestamp()) {
                        this.mergeTimestamp(other.getTimestamp());
                    }

                    this.mergeUnknownFields(other.unknownFields);
                    this.onChanged();
                    return this;
                }
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                OpenChannelResponse parsedMessage = null;

                try {
                    parsedMessage = (OpenChannelResponse)SpeechToTextDefinitions.OpenChannelResponse.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException var8) {
                    parsedMessage = (OpenChannelResponse)var8.getUnfinishedMessage();
                    throw var8.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        this.mergeFrom(parsedMessage);
                    }

                }

                return this;
            }

            public boolean hasTimestamp() {
                return this.timestampBuilder_ != null || this.timestamp_ != null;
            }

            public Timestamp getTimestamp() {
                if (this.timestampBuilder_ == null) {
                    return this.timestamp_ == null ? Timestamp.getDefaultInstance() : this.timestamp_;
                } else {
                    return (Timestamp)this.timestampBuilder_.getMessage();
                }
            }

            public Builder setTimestamp(Timestamp value) {
                if (this.timestampBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }

                    this.timestamp_ = value;
                    this.onChanged();
                } else {
                    this.timestampBuilder_.setMessage(value);
                }

                return this;
            }

            public Builder setTimestamp(Timestamp.Builder builderForValue) {
                if (this.timestampBuilder_ == null) {
                    this.timestamp_ = builderForValue.build();
                    this.onChanged();
                } else {
                    this.timestampBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            public Builder mergeTimestamp(Timestamp value) {
                if (this.timestampBuilder_ == null) {
                    if (this.timestamp_ != null) {
                        this.timestamp_ = Timestamp.newBuilder(this.timestamp_).mergeFrom(value).buildPartial();
                    } else {
                        this.timestamp_ = value;
                    }

                    this.onChanged();
                } else {
                    this.timestampBuilder_.mergeFrom(value);
                }

                return this;
            }

            public Builder clearTimestamp() {
                if (this.timestampBuilder_ == null) {
                    this.timestamp_ = null;
                    this.onChanged();
                } else {
                    this.timestamp_ = null;
                    this.timestampBuilder_ = null;
                }

                return this;
            }

            public Timestamp.Builder getTimestampBuilder() {
                this.onChanged();
                return (Timestamp.Builder)this.getTimestampFieldBuilder().getBuilder();
            }

            public TimestampOrBuilder getTimestampOrBuilder() {
                if (this.timestampBuilder_ != null) {
                    return (TimestampOrBuilder)this.timestampBuilder_.getMessageOrBuilder();
                } else {
                    return this.timestamp_ == null ? Timestamp.getDefaultInstance() : this.timestamp_;
                }
            }

            private SingleFieldBuilderV3<Timestamp, Timestamp.Builder, TimestampOrBuilder> getTimestampFieldBuilder() {
                if (this.timestampBuilder_ == null) {
                    this.timestampBuilder_ = new SingleFieldBuilderV3(this.getTimestamp(), this.getParentForChildren(), this.isClean());
                    this.timestamp_ = null;
                }

                return this.timestampBuilder_;
            }

            public final Builder setUnknownFields(UnknownFieldSet unknownFields) {
                return (Builder)super.setUnknownFields(unknownFields);
            }

            public final Builder mergeUnknownFields(UnknownFieldSet unknownFields) {
                return (Builder)super.mergeUnknownFields(unknownFields);
            }
        }
    }

    public interface OpenChannelResponseOrBuilder extends MessageOrBuilder {
        boolean hasTimestamp();

        Timestamp getTimestamp();

        TimestampOrBuilder getTimestampOrBuilder();
    }

    public static final class OpenChannelRequest extends GeneratedMessageV3 implements OpenChannelRequestOrBuilder {
        private static final long serialVersionUID = 0L;
        public static final int TIMESTAMP_FIELD_NUMBER = 1;
        private Timestamp timestamp_;
        private byte memoizedIsInitialized;
        private static final OpenChannelRequest DEFAULT_INSTANCE = new OpenChannelRequest();
        private static final Parser<OpenChannelRequest> PARSER = new AbstractParser<OpenChannelRequest>() {
            public OpenChannelRequest parsePartialFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
                return new OpenChannelRequest(input, extensionRegistry);
            }
        };

        private OpenChannelRequest(GeneratedMessageV3.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
        }

        private OpenChannelRequest() {
            this.memoizedIsInitialized = -1;
        }

        protected Object newInstance(GeneratedMessageV3.UnusedPrivateParameter unused) {
            return new OpenChannelRequest();
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private OpenChannelRequest(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            this();
            if (extensionRegistry == null) {
                throw new NullPointerException();
            } else {
                UnknownFieldSet.Builder unknownFields = UnknownFieldSet.newBuilder();

                try {
                    boolean done = false;

                    while(!done) {
                        int tag = input.readTag();
                        switch (tag) {
                            case 0:
                                done = true;
                                break;
                            case 10:
                                Timestamp.Builder subBuilder = null;
                                if (this.timestamp_ != null) {
                                    subBuilder = this.timestamp_.toBuilder();
                                }

                                this.timestamp_ = (Timestamp)input.readMessage(Timestamp.parser(), extensionRegistry);
                                if (subBuilder != null) {
                                    subBuilder.mergeFrom(this.timestamp_);
                                    this.timestamp_ = subBuilder.buildPartial();
                                }
                                break;
                            default:
                                if (!this.parseUnknownField(input, unknownFields, extensionRegistry, tag)) {
                                    done = true;
                                }
                        }
                    }
                } catch (InvalidProtocolBufferException var12) {
                    throw var12.setUnfinishedMessage(this);
                } catch (UninitializedMessageException var13) {
                    throw var13.asInvalidProtocolBufferException().setUnfinishedMessage(this);
                } catch (IOException var14) {
                    throw (new InvalidProtocolBufferException(var14)).setUnfinishedMessage(this);
                } finally {
                    this.unknownFields = unknownFields.build();
                    this.makeExtensionsImmutable();
                }

            }
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return SpeechToTextDefinitions.internal_static_stt_OpenChannelRequest_descriptor;
        }

        protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
            return SpeechToTextDefinitions.internal_static_stt_OpenChannelRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(OpenChannelRequest.class, Builder.class);
        }

        public boolean hasTimestamp() {
            return this.timestamp_ != null;
        }

        public Timestamp getTimestamp() {
            return this.timestamp_ == null ? Timestamp.getDefaultInstance() : this.timestamp_;
        }

        public TimestampOrBuilder getTimestampOrBuilder() {
            return this.getTimestamp();
        }

        public final boolean isInitialized() {
            byte isInitialized = this.memoizedIsInitialized;
            if (isInitialized == 1) {
                return true;
            } else if (isInitialized == 0) {
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public void writeTo(CodedOutputStream output) throws IOException {
            if (this.timestamp_ != null) {
                output.writeMessage(1, this.getTimestamp());
            }

            this.unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
            int size = this.memoizedSize;
            if (size != -1) {
                return size;
            } else {
                size = 0;
                if (this.timestamp_ != null) {
                    size += CodedOutputStream.computeMessageSize(1, this.getTimestamp());
                }

                size += this.unknownFields.getSerializedSize();
                this.memoizedSize = size;
                return size;
            }
        }

        public boolean equals(Object obj) {
            if (obj == this) {
                return true;
            } else if (!(obj instanceof OpenChannelRequest)) {
                return super.equals(obj);
            } else {
                OpenChannelRequest other = (OpenChannelRequest)obj;
                if (this.hasTimestamp() != other.hasTimestamp()) {
                    return false;
                } else if (this.hasTimestamp() && !this.getTimestamp().equals(other.getTimestamp())) {
                    return false;
                } else {
                    return this.unknownFields.equals(other.unknownFields);
                }
            }
        }

        public int hashCode() {
            if (this.memoizedHashCode != 0) {
                return this.memoizedHashCode;
            } else {
                int hash = 41;
                hash = 19 * hash + getDescriptor().hashCode();
                if (this.hasTimestamp()) {
                    hash = 37 * hash + 1;
                    hash = 53 * hash + this.getTimestamp().hashCode();
                }

                hash = 29 * hash + this.unknownFields.hashCode();
                this.memoizedHashCode = hash;
                return hash;
            }
        }

        public static OpenChannelRequest parseFrom(ByteBuffer data) throws InvalidProtocolBufferException {
            return (OpenChannelRequest)PARSER.parseFrom(data);
        }

        public static OpenChannelRequest parseFrom(ByteBuffer data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OpenChannelRequest)PARSER.parseFrom(data, extensionRegistry);
        }

        public static OpenChannelRequest parseFrom(ByteString data) throws InvalidProtocolBufferException {
            return (OpenChannelRequest)PARSER.parseFrom(data);
        }

        public static OpenChannelRequest parseFrom(ByteString data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OpenChannelRequest)PARSER.parseFrom(data, extensionRegistry);
        }

        public static OpenChannelRequest parseFrom(byte[] data) throws InvalidProtocolBufferException {
            return (OpenChannelRequest)PARSER.parseFrom(data);
        }

        public static OpenChannelRequest parseFrom(byte[] data, ExtensionRegistryLite extensionRegistry) throws InvalidProtocolBufferException {
            return (OpenChannelRequest)PARSER.parseFrom(data, extensionRegistry);
        }

        public static OpenChannelRequest parseFrom(InputStream input) throws IOException {
            return (OpenChannelRequest)GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static OpenChannelRequest parseFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OpenChannelRequest)GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static OpenChannelRequest parseDelimitedFrom(InputStream input) throws IOException {
            return (OpenChannelRequest)GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input);
        }

        public static OpenChannelRequest parseDelimitedFrom(InputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OpenChannelRequest)GeneratedMessageV3.parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }

        public static OpenChannelRequest parseFrom(CodedInputStream input) throws IOException {
            return (OpenChannelRequest)GeneratedMessageV3.parseWithIOException(PARSER, input);
        }

        public static OpenChannelRequest parseFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
            return (OpenChannelRequest)GeneratedMessageV3.parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder() {
            return DEFAULT_INSTANCE.toBuilder();
        }

        public static Builder newBuilder(OpenChannelRequest prototype) {
            return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }

        public Builder toBuilder() {
            return this == DEFAULT_INSTANCE ? new Builder() : (new Builder()).mergeFrom(this);
        }

        protected Builder newBuilderForType(GeneratedMessageV3.BuilderParent parent) {
            Builder builder = new Builder(parent);
            return builder;
        }

        public static OpenChannelRequest getDefaultInstance() {
            return DEFAULT_INSTANCE;
        }

        public static Parser<OpenChannelRequest> parser() {
            return PARSER;
        }

        public Parser<OpenChannelRequest> getParserForType() {
            return PARSER;
        }

        public OpenChannelRequest getDefaultInstanceForType() {
            return DEFAULT_INSTANCE;
        }

        public static final class Builder extends GeneratedMessageV3.Builder<Builder> implements OpenChannelRequestOrBuilder {
            private Timestamp timestamp_;
            private SingleFieldBuilderV3<Timestamp, Timestamp.Builder, TimestampOrBuilder> timestampBuilder_;

            public static final Descriptors.Descriptor getDescriptor() {
                return SpeechToTextDefinitions.internal_static_stt_OpenChannelRequest_descriptor;
            }

            protected GeneratedMessageV3.FieldAccessorTable internalGetFieldAccessorTable() {
                return SpeechToTextDefinitions.internal_static_stt_OpenChannelRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(OpenChannelRequest.class, Builder.class);
            }

            private Builder() {
                this.maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessageV3.BuilderParent parent) {
                super(parent);
                this.maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (SpeechToTextDefinitions.OpenChannelRequest.alwaysUseFieldBuilders) {
                }

            }

            public Builder clear() {
                super.clear();
                if (this.timestampBuilder_ == null) {
                    this.timestamp_ = null;
                } else {
                    this.timestamp_ = null;
                    this.timestampBuilder_ = null;
                }

                return this;
            }

            public Descriptors.Descriptor getDescriptorForType() {
                return SpeechToTextDefinitions.internal_static_stt_OpenChannelRequest_descriptor;
            }

            public OpenChannelRequest getDefaultInstanceForType() {
                return SpeechToTextDefinitions.OpenChannelRequest.getDefaultInstance();
            }

            public OpenChannelRequest build() {
                OpenChannelRequest result = this.buildPartial();
                if (!result.isInitialized()) {
                    throw newUninitializedMessageException(result);
                } else {
                    return result;
                }
            }

            public OpenChannelRequest buildPartial() {
                OpenChannelRequest result = new OpenChannelRequest(this);
                if (this.timestampBuilder_ == null) {
                    result.timestamp_ = this.timestamp_;
                } else {
                    result.timestamp_ = (Timestamp)this.timestampBuilder_.build();
                }

                this.onBuilt();
                return result;
            }

            public Builder clone() {
                return (Builder)super.clone();
            }

            public Builder setField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder)super.setField(field, value);
            }

            public Builder clearField(Descriptors.FieldDescriptor field) {
                return (Builder)super.clearField(field);
            }

            public Builder clearOneof(Descriptors.OneofDescriptor oneof) {
                return (Builder)super.clearOneof(oneof);
            }

            public Builder setRepeatedField(Descriptors.FieldDescriptor field, int index, Object value) {
                return (Builder)super.setRepeatedField(field, index, value);
            }

            public Builder addRepeatedField(Descriptors.FieldDescriptor field, Object value) {
                return (Builder)super.addRepeatedField(field, value);
            }

            public Builder mergeFrom(Message other) {
                if (other instanceof OpenChannelRequest) {
                    return this.mergeFrom((OpenChannelRequest)other);
                } else {
                    super.mergeFrom(other);
                    return this;
                }
            }

            public Builder mergeFrom(OpenChannelRequest other) {
                if (other == SpeechToTextDefinitions.OpenChannelRequest.getDefaultInstance()) {
                    return this;
                } else {
                    if (other.hasTimestamp()) {
                        this.mergeTimestamp(other.getTimestamp());
                    }

                    this.mergeUnknownFields(other.unknownFields);
                    this.onChanged();
                    return this;
                }
            }

            public final boolean isInitialized() {
                return true;
            }

            public Builder mergeFrom(CodedInputStream input, ExtensionRegistryLite extensionRegistry) throws IOException {
                OpenChannelRequest parsedMessage = null;

                try {
                    parsedMessage = (OpenChannelRequest)SpeechToTextDefinitions.OpenChannelRequest.PARSER.parsePartialFrom(input, extensionRegistry);
                } catch (InvalidProtocolBufferException var8) {
                    parsedMessage = (OpenChannelRequest)var8.getUnfinishedMessage();
                    throw var8.unwrapIOException();
                } finally {
                    if (parsedMessage != null) {
                        this.mergeFrom(parsedMessage);
                    }

                }

                return this;
            }

            public boolean hasTimestamp() {
                return this.timestampBuilder_ != null || this.timestamp_ != null;
            }

            public Timestamp getTimestamp() {
                if (this.timestampBuilder_ == null) {
                    return this.timestamp_ == null ? Timestamp.getDefaultInstance() : this.timestamp_;
                } else {
                    return (Timestamp)this.timestampBuilder_.getMessage();
                }
            }

            public Builder setTimestamp(Timestamp value) {
                if (this.timestampBuilder_ == null) {
                    if (value == null) {
                        throw new NullPointerException();
                    }

                    this.timestamp_ = value;
                    this.onChanged();
                } else {
                    this.timestampBuilder_.setMessage(value);
                }

                return this;
            }

            public Builder setTimestamp(Timestamp.Builder builderForValue) {
                if (this.timestampBuilder_ == null) {
                    this.timestamp_ = builderForValue.build();
                    this.onChanged();
                } else {
                    this.timestampBuilder_.setMessage(builderForValue.build());
                }

                return this;
            }

            public Builder mergeTimestamp(Timestamp value) {
                if (this.timestampBuilder_ == null) {
                    if (this.timestamp_ != null) {
                        this.timestamp_ = Timestamp.newBuilder(this.timestamp_).mergeFrom(value).buildPartial();
                    } else {
                        this.timestamp_ = value;
                    }

                    this.onChanged();
                } else {
                    this.timestampBuilder_.mergeFrom(value);
                }

                return this;
            }

            public Builder clearTimestamp() {
                if (this.timestampBuilder_ == null) {
                    this.timestamp_ = null;
                    this.onChanged();
                } else {
                    this.timestamp_ = null;
                    this.timestampBuilder_ = null;
                }

                return this;
            }

            public Timestamp.Builder getTimestampBuilder() {
                this.onChanged();
                return (Timestamp.Builder)this.getTimestampFieldBuilder().getBuilder();
            }

            public TimestampOrBuilder getTimestampOrBuilder() {
                if (this.timestampBuilder_ != null) {
                    return (TimestampOrBuilder)this.timestampBuilder_.getMessageOrBuilder();
                } else {
                    return this.timestamp_ == null ? Timestamp.getDefaultInstance() : this.timestamp_;
                }
            }

            private SingleFieldBuilderV3<Timestamp, Timestamp.Builder, TimestampOrBuilder> getTimestampFieldBuilder() {
                if (this.timestampBuilder_ == null) {
                    this.timestampBuilder_ = new SingleFieldBuilderV3(this.getTimestamp(), this.getParentForChildren(), this.isClean());
                    this.timestamp_ = null;
                }

                return this.timestampBuilder_;
            }

            public final Builder setUnknownFields(UnknownFieldSet unknownFields) {
                return (Builder)super.setUnknownFields(unknownFields);
            }

            public final Builder mergeUnknownFields(UnknownFieldSet unknownFields) {
                return (Builder)super.mergeUnknownFields(unknownFields);
            }
        }
    }

    public interface OpenChannelRequestOrBuilder extends MessageOrBuilder {
        boolean hasTimestamp();

        Timestamp getTimestamp();

        TimestampOrBuilder getTimestampOrBuilder();
    }

    public static enum Reason implements ProtocolMessageEnum {
        RECOGNIZING(0),
        RECOGNIZED(1),
        UNRECOGNIZED(-1);

        public static final int RECOGNIZING_VALUE = 0;
        public static final int RECOGNIZED_VALUE = 1;
        private static final Internal.EnumLiteMap<Reason> internalValueMap = new Internal.EnumLiteMap<Reason>() {
            public Reason findValueByNumber(int number) {
                return SpeechToTextDefinitions.Reason.forNumber(number);
            }
        };
        private static final Reason[] VALUES = values();
        private final int value;

        public final int getNumber() {
            if (this == UNRECOGNIZED) {
                throw new IllegalArgumentException("Can't get the number of an unknown enum value.");
            } else {
                return this.value;
            }
        }

        /** @deprecated */
        @Deprecated
        public static Reason valueOf(int value) {
            return forNumber(value);
        }

        public static Reason forNumber(int value) {
            switch (value) {
                case 0:
                    return RECOGNIZING;
                case 1:
                    return RECOGNIZED;
                default:
                    return null;
            }
        }

        public static Internal.EnumLiteMap<Reason> internalGetValueMap() {
            return internalValueMap;
        }

        public final Descriptors.EnumValueDescriptor getValueDescriptor() {
            if (this == UNRECOGNIZED) {
                throw new IllegalStateException("Can't get the descriptor of an unrecognized enum value.");
            } else {
                return (Descriptors.EnumValueDescriptor)getDescriptor().getValues().get(this.ordinal());
            }
        }

        public final Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static final Descriptors.EnumDescriptor getDescriptor() {
            return (Descriptors.EnumDescriptor)SpeechToTextDefinitions.getDescriptor().getEnumTypes().get(0);
        }

        public static Reason valueOf(Descriptors.EnumValueDescriptor desc) {
            if (desc.getType() != getDescriptor()) {
                throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
            } else {
                return desc.getIndex() == -1 ? UNRECOGNIZED : VALUES[desc.getIndex()];
            }
        }

        private Reason(int value) {
            this.value = value;
        }
    }
}
