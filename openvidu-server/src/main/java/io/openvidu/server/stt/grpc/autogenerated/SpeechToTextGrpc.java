//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package io.openvidu.server.stt.grpc.autogenerated;

import com.google.common.util.concurrent.ListenableFuture;
import com.google.protobuf.Descriptors;
import io.grpc.BindableService;
import io.grpc.CallOptions;
import io.grpc.Channel;
import io.grpc.MethodDescriptor;
import io.grpc.ServerServiceDefinition;
import io.grpc.ServiceDescriptor;
import io.grpc.MethodDescriptor.MethodType;
import io.grpc.protobuf.ProtoFileDescriptorSupplier;
import io.grpc.protobuf.ProtoMethodDescriptorSupplier;
import io.grpc.protobuf.ProtoServiceDescriptorSupplier;
import io.grpc.protobuf.ProtoUtils;
import io.grpc.stub.AbstractAsyncStub;
import io.grpc.stub.AbstractBlockingStub;
import io.grpc.stub.AbstractFutureStub;
import io.grpc.stub.AbstractStub;
import io.grpc.stub.ClientCalls;
import io.grpc.stub.ServerCalls;
import io.grpc.stub.StreamObserver;
import io.grpc.stub.annotations.GrpcGenerated;
import io.grpc.stub.annotations.RpcMethod;
import io.openvidu.server.stt.grpc.autogenerated.SpeechToTextDefinitions.LoadVoskModelRequest;
import io.openvidu.server.stt.grpc.autogenerated.SpeechToTextDefinitions.LoadVoskModelResponse;
import io.openvidu.server.stt.grpc.autogenerated.SpeechToTextDefinitions.OpenChannelRequest;
import io.openvidu.server.stt.grpc.autogenerated.SpeechToTextDefinitions.SpeechToTextMessage;
import io.openvidu.server.stt.grpc.autogenerated.SpeechToTextDefinitions.SpeechToTextSubscriptionRequest;
import io.openvidu.server.stt.grpc.autogenerated.SpeechToTextDefinitions.SpeechToTextSubscriptionResponse;
import io.openvidu.server.stt.grpc.autogenerated.SpeechToTextDefinitions.SpeechToTextUnsubscriptionRequest;
import io.openvidu.server.stt.grpc.autogenerated.SpeechToTextDefinitions.SpeechToTextUnsubscriptionResponse;
import io.openvidu.server.stt.grpc.autogenerated.SpeechToTextDefinitions;

import java.util.Iterator;

@GrpcGenerated
public final class SpeechToTextGrpc {
    public static final String SERVICE_NAME = "stt.SpeechToText";
    private static volatile MethodDescriptor<SpeechToTextDefinitions.OpenChannelRequest, SpeechToTextDefinitions.SpeechToTextMessage> getOpenChannelMethod;
    private static volatile MethodDescriptor<SpeechToTextDefinitions.SpeechToTextSubscriptionRequest, SpeechToTextDefinitions.SpeechToTextSubscriptionResponse> getSubscribeToSpeechToTextMethod;
    private static volatile MethodDescriptor<SpeechToTextDefinitions.SpeechToTextUnsubscriptionRequest, SpeechToTextDefinitions.SpeechToTextUnsubscriptionResponse> getUnsubscribeFromSpeechToTextMethod;
    private static volatile MethodDescriptor<SpeechToTextDefinitions.LoadVoskModelRequest, SpeechToTextDefinitions.LoadVoskModelResponse> getLoadVoskModelMethod;
    private static volatile MethodDescriptor<SpeechToTextDefinitions.LoadVoskModelRequest, SpeechToTextDefinitions.LoadVoskModelResponse> getUnloadVoskModelMethod;
    private static final int METHODID_OPEN_CHANNEL = 0;
    private static final int METHODID_SUBSCRIBE_TO_SPEECH_TO_TEXT = 1;
    private static final int METHODID_UNSUBSCRIBE_FROM_SPEECH_TO_TEXT = 2;
    private static final int METHODID_LOAD_VOSK_MODEL = 3;
    private static final int METHODID_UNLOAD_VOSK_MODEL = 4;
    private static volatile ServiceDescriptor serviceDescriptor;

    private SpeechToTextGrpc() {
    }

    @RpcMethod(
            fullMethodName = "stt.SpeechToText/OpenChannel",
            requestType = SpeechToTextDefinitions.OpenChannelRequest.class,
            responseType = SpeechToTextDefinitions.SpeechToTextMessage.class,
            methodType = MethodType.SERVER_STREAMING
    )
    public static MethodDescriptor<SpeechToTextDefinitions.OpenChannelRequest, SpeechToTextDefinitions.SpeechToTextMessage> getOpenChannelMethod() {
        MethodDescriptor getOpenChannelMethod;
        if ((getOpenChannelMethod = SpeechToTextGrpc.getOpenChannelMethod) == null) {
            Class var1 = SpeechToTextGrpc.class;
            synchronized(SpeechToTextGrpc.class) {
                if ((getOpenChannelMethod = SpeechToTextGrpc.getOpenChannelMethod) == null) {
                    SpeechToTextGrpc.getOpenChannelMethod = getOpenChannelMethod = MethodDescriptor.newBuilder().setType(MethodType.SERVER_STREAMING).setFullMethodName(MethodDescriptor.generateFullMethodName("stt.SpeechToText", "OpenChannel")).setSampledToLocalTracing(true).setRequestMarshaller(ProtoUtils.marshaller(OpenChannelRequest.getDefaultInstance())).setResponseMarshaller(ProtoUtils.marshaller(SpeechToTextMessage.getDefaultInstance())).setSchemaDescriptor(new SpeechToTextMethodDescriptorSupplier("OpenChannel")).build();
                }
            }
        }

        return getOpenChannelMethod;
    }

    @RpcMethod(
            fullMethodName = "stt.SpeechToText/SubscribeToSpeechToText",
            requestType = SpeechToTextDefinitions.SpeechToTextSubscriptionRequest.class,
            responseType = SpeechToTextDefinitions.SpeechToTextSubscriptionResponse.class,
            methodType = MethodType.UNARY
    )
    public static MethodDescriptor<SpeechToTextDefinitions.SpeechToTextSubscriptionRequest, SpeechToTextDefinitions.SpeechToTextSubscriptionResponse> getSubscribeToSpeechToTextMethod() {
        MethodDescriptor getSubscribeToSpeechToTextMethod;
        if ((getSubscribeToSpeechToTextMethod = SpeechToTextGrpc.getSubscribeToSpeechToTextMethod) == null) {
            Class var1 = SpeechToTextGrpc.class;
            synchronized(SpeechToTextGrpc.class) {
                if ((getSubscribeToSpeechToTextMethod = SpeechToTextGrpc.getSubscribeToSpeechToTextMethod) == null) {
                    SpeechToTextGrpc.getSubscribeToSpeechToTextMethod = getSubscribeToSpeechToTextMethod = MethodDescriptor.newBuilder().setType(MethodType.UNARY).setFullMethodName(MethodDescriptor.generateFullMethodName("stt.SpeechToText", "SubscribeToSpeechToText")).setSampledToLocalTracing(true).setRequestMarshaller(ProtoUtils.marshaller(SpeechToTextSubscriptionRequest.getDefaultInstance())).setResponseMarshaller(ProtoUtils.marshaller(SpeechToTextSubscriptionResponse.getDefaultInstance())).setSchemaDescriptor(new SpeechToTextMethodDescriptorSupplier("SubscribeToSpeechToText")).build();
                }
            }
        }

        return getSubscribeToSpeechToTextMethod;
    }

    @RpcMethod(
            fullMethodName = "stt.SpeechToText/UnsubscribeFromSpeechToText",
            requestType = SpeechToTextDefinitions.SpeechToTextUnsubscriptionRequest.class,
            responseType = SpeechToTextDefinitions.SpeechToTextUnsubscriptionResponse.class,
            methodType = MethodType.UNARY
    )
    public static MethodDescriptor<SpeechToTextDefinitions.SpeechToTextUnsubscriptionRequest, SpeechToTextDefinitions.SpeechToTextUnsubscriptionResponse> getUnsubscribeFromSpeechToTextMethod() {
        MethodDescriptor getUnsubscribeFromSpeechToTextMethod;
        if ((getUnsubscribeFromSpeechToTextMethod = SpeechToTextGrpc.getUnsubscribeFromSpeechToTextMethod) == null) {
            Class var1 = SpeechToTextGrpc.class;
            synchronized(SpeechToTextGrpc.class) {
                if ((getUnsubscribeFromSpeechToTextMethod = SpeechToTextGrpc.getUnsubscribeFromSpeechToTextMethod) == null) {
                    SpeechToTextGrpc.getUnsubscribeFromSpeechToTextMethod = getUnsubscribeFromSpeechToTextMethod = MethodDescriptor.newBuilder().setType(MethodType.UNARY).setFullMethodName(MethodDescriptor.generateFullMethodName("stt.SpeechToText", "UnsubscribeFromSpeechToText")).setSampledToLocalTracing(true).setRequestMarshaller(ProtoUtils.marshaller(SpeechToTextUnsubscriptionRequest.getDefaultInstance())).setResponseMarshaller(ProtoUtils.marshaller(SpeechToTextUnsubscriptionResponse.getDefaultInstance())).setSchemaDescriptor(new SpeechToTextMethodDescriptorSupplier("UnsubscribeFromSpeechToText")).build();
                }
            }
        }

        return getUnsubscribeFromSpeechToTextMethod;
    }

    @RpcMethod(
            fullMethodName = "stt.SpeechToText/LoadVoskModel",
            requestType = SpeechToTextDefinitions.LoadVoskModelRequest.class,
            responseType = SpeechToTextDefinitions.LoadVoskModelResponse.class,
            methodType = MethodType.UNARY
    )
    public static MethodDescriptor<SpeechToTextDefinitions.LoadVoskModelRequest, SpeechToTextDefinitions.LoadVoskModelResponse> getLoadVoskModelMethod() {
        MethodDescriptor getLoadVoskModelMethod;
        if ((getLoadVoskModelMethod = SpeechToTextGrpc.getLoadVoskModelMethod) == null) {
            Class var1 = SpeechToTextGrpc.class;
            synchronized(SpeechToTextGrpc.class) {
                if ((getLoadVoskModelMethod = SpeechToTextGrpc.getLoadVoskModelMethod) == null) {
                    SpeechToTextGrpc.getLoadVoskModelMethod = getLoadVoskModelMethod = MethodDescriptor.newBuilder().setType(MethodType.UNARY).setFullMethodName(MethodDescriptor.generateFullMethodName("stt.SpeechToText", "LoadVoskModel")).setSampledToLocalTracing(true).setRequestMarshaller(ProtoUtils.marshaller(LoadVoskModelRequest.getDefaultInstance())).setResponseMarshaller(ProtoUtils.marshaller(LoadVoskModelResponse.getDefaultInstance())).setSchemaDescriptor(new SpeechToTextMethodDescriptorSupplier("LoadVoskModel")).build();
                }
            }
        }

        return getLoadVoskModelMethod;
    }

    @RpcMethod(
            fullMethodName = "stt.SpeechToText/UnloadVoskModel",
            requestType = SpeechToTextDefinitions.LoadVoskModelRequest.class,
            responseType = SpeechToTextDefinitions.LoadVoskModelResponse.class,
            methodType = MethodType.UNARY
    )
    public static MethodDescriptor<SpeechToTextDefinitions.LoadVoskModelRequest, SpeechToTextDefinitions.LoadVoskModelResponse> getUnloadVoskModelMethod() {
        MethodDescriptor getUnloadVoskModelMethod;
        if ((getUnloadVoskModelMethod = SpeechToTextGrpc.getUnloadVoskModelMethod) == null) {
            Class var1 = SpeechToTextGrpc.class;
            synchronized(SpeechToTextGrpc.class) {
                if ((getUnloadVoskModelMethod = SpeechToTextGrpc.getUnloadVoskModelMethod) == null) {
                    SpeechToTextGrpc.getUnloadVoskModelMethod = getUnloadVoskModelMethod = MethodDescriptor.newBuilder().setType(MethodType.UNARY).setFullMethodName(MethodDescriptor.generateFullMethodName("stt.SpeechToText", "UnloadVoskModel")).setSampledToLocalTracing(true).setRequestMarshaller(ProtoUtils.marshaller(LoadVoskModelRequest.getDefaultInstance())).setResponseMarshaller(ProtoUtils.marshaller(LoadVoskModelResponse.getDefaultInstance())).setSchemaDescriptor(new SpeechToTextMethodDescriptorSupplier("UnloadVoskModel")).build();
                }
            }
        }

        return getUnloadVoskModelMethod;
    }

    public static SpeechToTextStub newStub(Channel channel) {
        AbstractStub.StubFactory<SpeechToTextStub> factory = new AbstractStub.StubFactory<SpeechToTextStub>() {
            public SpeechToTextStub newStub(Channel channel, CallOptions callOptions) {
                return new SpeechToTextStub(channel, callOptions);
            }
        };
        return (SpeechToTextStub)SpeechToTextGrpc.SpeechToTextStub.newStub(factory, channel);
    }

    public static SpeechToTextBlockingStub newBlockingStub(Channel channel) {
        AbstractStub.StubFactory<SpeechToTextBlockingStub> factory = new AbstractStub.StubFactory<SpeechToTextBlockingStub>() {
            public SpeechToTextBlockingStub newStub(Channel channel, CallOptions callOptions) {
                return new SpeechToTextBlockingStub(channel, callOptions);
            }
        };
        return (SpeechToTextBlockingStub)SpeechToTextGrpc.SpeechToTextBlockingStub.newStub(factory, channel);
    }

    public static SpeechToTextFutureStub newFutureStub(Channel channel) {
        AbstractStub.StubFactory<SpeechToTextFutureStub> factory = new AbstractStub.StubFactory<SpeechToTextFutureStub>() {
            public SpeechToTextFutureStub newStub(Channel channel, CallOptions callOptions) {
                return new SpeechToTextFutureStub(channel, callOptions);
            }
        };
        return (SpeechToTextFutureStub)SpeechToTextGrpc.SpeechToTextFutureStub.newStub(factory, channel);
    }

    public static ServiceDescriptor getServiceDescriptor() {
        ServiceDescriptor result = serviceDescriptor;
        if (result == null) {
            Class var1 = SpeechToTextGrpc.class;
            synchronized(SpeechToTextGrpc.class) {
                result = serviceDescriptor;
                if (result == null) {
                    serviceDescriptor = result = ServiceDescriptor.newBuilder("stt.SpeechToText").setSchemaDescriptor(new SpeechToTextFileDescriptorSupplier()).addMethod(getOpenChannelMethod()).addMethod(getSubscribeToSpeechToTextMethod()).addMethod(getUnsubscribeFromSpeechToTextMethod()).addMethod(getLoadVoskModelMethod()).addMethod(getUnloadVoskModelMethod()).build();
                }
            }
        }

        return result;
    }

    private static final class SpeechToTextMethodDescriptorSupplier extends SpeechToTextBaseDescriptorSupplier implements ProtoMethodDescriptorSupplier {
        private final String methodName;

        SpeechToTextMethodDescriptorSupplier(String methodName) {
            this.methodName = methodName;
        }

        public Descriptors.MethodDescriptor getMethodDescriptor() {
            return this.getServiceDescriptor().findMethodByName(this.methodName);
        }
    }

    private static final class SpeechToTextFileDescriptorSupplier extends SpeechToTextBaseDescriptorSupplier {
        SpeechToTextFileDescriptorSupplier() {
        }
    }

    private abstract static class SpeechToTextBaseDescriptorSupplier implements ProtoFileDescriptorSupplier, ProtoServiceDescriptorSupplier {
        SpeechToTextBaseDescriptorSupplier() {
        }

        public Descriptors.FileDescriptor getFileDescriptor() {
            return SpeechToTextDefinitions.getDescriptor();
        }

        public Descriptors.ServiceDescriptor getServiceDescriptor() {
            return this.getFileDescriptor().findServiceByName("SpeechToText");
        }
    }

    private static final class MethodHandlers<Req, Resp> implements ServerCalls.UnaryMethod<Req, Resp>, ServerCalls.ServerStreamingMethod<Req, Resp>, ServerCalls.ClientStreamingMethod<Req, Resp>, ServerCalls.BidiStreamingMethod<Req, Resp> {
        private final SpeechToTextImplBase serviceImpl;
        private final int methodId;

        MethodHandlers(SpeechToTextImplBase serviceImpl, int methodId) {
            this.serviceImpl = serviceImpl;
            this.methodId = methodId;
        }

        public void invoke(Req request, StreamObserver<Resp> responseObserver) {
            switch (this.methodId) {
                case 0:
                    this.serviceImpl.openChannel((SpeechToTextDefinitions.OpenChannelRequest)request, responseObserver);
                    break;
                case 1:
                    this.serviceImpl.subscribeToSpeechToText((SpeechToTextDefinitions.SpeechToTextSubscriptionRequest)request, responseObserver);
                    break;
                case 2:
                    this.serviceImpl.unsubscribeFromSpeechToText((SpeechToTextDefinitions.SpeechToTextUnsubscriptionRequest)request, responseObserver);
                    break;
                case 3:
                    this.serviceImpl.loadVoskModel((SpeechToTextDefinitions.LoadVoskModelRequest)request, responseObserver);
                    break;
                case 4:
                    this.serviceImpl.unloadVoskModel((SpeechToTextDefinitions.LoadVoskModelRequest)request, responseObserver);
                    break;
                default:
                    throw new AssertionError();
            }

        }

        public StreamObserver<Req> invoke(StreamObserver<Resp> responseObserver) {
            switch (this.methodId) {
                default:
                    throw new AssertionError();
            }
        }
    }

    public static final class SpeechToTextFutureStub extends AbstractFutureStub<SpeechToTextFutureStub> {
        private SpeechToTextFutureStub(Channel channel, CallOptions callOptions) {
            super(channel, callOptions);
        }

        protected SpeechToTextFutureStub build(Channel channel, CallOptions callOptions) {
            return new SpeechToTextFutureStub(channel, callOptions);
        }

        public ListenableFuture<SpeechToTextDefinitions.SpeechToTextSubscriptionResponse> subscribeToSpeechToText(SpeechToTextDefinitions.SpeechToTextSubscriptionRequest request) {
            return ClientCalls.futureUnaryCall(this.getChannel().newCall(SpeechToTextGrpc.getSubscribeToSpeechToTextMethod(), this.getCallOptions()), request);
        }

        public ListenableFuture<SpeechToTextDefinitions.SpeechToTextUnsubscriptionResponse> unsubscribeFromSpeechToText(SpeechToTextDefinitions.SpeechToTextUnsubscriptionRequest request) {
            return ClientCalls.futureUnaryCall(this.getChannel().newCall(SpeechToTextGrpc.getUnsubscribeFromSpeechToTextMethod(), this.getCallOptions()), request);
        }

        public ListenableFuture<SpeechToTextDefinitions.LoadVoskModelResponse> loadVoskModel(SpeechToTextDefinitions.LoadVoskModelRequest request) {
            return ClientCalls.futureUnaryCall(this.getChannel().newCall(SpeechToTextGrpc.getLoadVoskModelMethod(), this.getCallOptions()), request);
        }

        public ListenableFuture<SpeechToTextDefinitions.LoadVoskModelResponse> unloadVoskModel(SpeechToTextDefinitions.LoadVoskModelRequest request) {
            return ClientCalls.futureUnaryCall(this.getChannel().newCall(SpeechToTextGrpc.getUnloadVoskModelMethod(), this.getCallOptions()), request);
        }
    }

    public static final class SpeechToTextBlockingStub extends AbstractBlockingStub<SpeechToTextBlockingStub> {
        private SpeechToTextBlockingStub(Channel channel, CallOptions callOptions) {
            super(channel, callOptions);
        }

        protected SpeechToTextBlockingStub build(Channel channel, CallOptions callOptions) {
            return new SpeechToTextBlockingStub(channel, callOptions);
        }

        public Iterator<SpeechToTextDefinitions.SpeechToTextMessage> openChannel(SpeechToTextDefinitions.OpenChannelRequest request) {
            return ClientCalls.blockingServerStreamingCall(this.getChannel(), SpeechToTextGrpc.getOpenChannelMethod(), this.getCallOptions(), request);
        }

        public SpeechToTextDefinitions.SpeechToTextSubscriptionResponse subscribeToSpeechToText(SpeechToTextDefinitions.SpeechToTextSubscriptionRequest request) {
            return (SpeechToTextDefinitions.SpeechToTextSubscriptionResponse)ClientCalls.blockingUnaryCall(this.getChannel(), SpeechToTextGrpc.getSubscribeToSpeechToTextMethod(), this.getCallOptions(), request);
        }

        public SpeechToTextDefinitions.SpeechToTextUnsubscriptionResponse unsubscribeFromSpeechToText(SpeechToTextDefinitions.SpeechToTextUnsubscriptionRequest request) {
            return (SpeechToTextDefinitions.SpeechToTextUnsubscriptionResponse)ClientCalls.blockingUnaryCall(this.getChannel(), SpeechToTextGrpc.getUnsubscribeFromSpeechToTextMethod(), this.getCallOptions(), request);
        }

        public SpeechToTextDefinitions.LoadVoskModelResponse loadVoskModel(SpeechToTextDefinitions.LoadVoskModelRequest request) {
            return (SpeechToTextDefinitions.LoadVoskModelResponse)ClientCalls.blockingUnaryCall(this.getChannel(), SpeechToTextGrpc.getLoadVoskModelMethod(), this.getCallOptions(), request);
        }

        public SpeechToTextDefinitions.LoadVoskModelResponse unloadVoskModel(SpeechToTextDefinitions.LoadVoskModelRequest request) {
            return (SpeechToTextDefinitions.LoadVoskModelResponse)ClientCalls.blockingUnaryCall(this.getChannel(), SpeechToTextGrpc.getUnloadVoskModelMethod(), this.getCallOptions(), request);
        }
    }

    public static final class SpeechToTextStub extends AbstractAsyncStub<SpeechToTextStub> {
        private SpeechToTextStub(Channel channel, CallOptions callOptions) {
            super(channel, callOptions);
        }

        protected SpeechToTextStub build(Channel channel, CallOptions callOptions) {
            return new SpeechToTextStub(channel, callOptions);
        }

        public void openChannel(SpeechToTextDefinitions.OpenChannelRequest request, StreamObserver<SpeechToTextDefinitions.SpeechToTextMessage> responseObserver) {
            ClientCalls.asyncServerStreamingCall(this.getChannel().newCall(SpeechToTextGrpc.getOpenChannelMethod(), this.getCallOptions()), request, responseObserver);
        }

        public void subscribeToSpeechToText(SpeechToTextDefinitions.SpeechToTextSubscriptionRequest request, StreamObserver<SpeechToTextDefinitions.SpeechToTextSubscriptionResponse> responseObserver) {
            ClientCalls.asyncUnaryCall(this.getChannel().newCall(SpeechToTextGrpc.getSubscribeToSpeechToTextMethod(), this.getCallOptions()), request, responseObserver);
        }

        public void unsubscribeFromSpeechToText(SpeechToTextDefinitions.SpeechToTextUnsubscriptionRequest request, StreamObserver<SpeechToTextDefinitions.SpeechToTextUnsubscriptionResponse> responseObserver) {
            ClientCalls.asyncUnaryCall(this.getChannel().newCall(SpeechToTextGrpc.getUnsubscribeFromSpeechToTextMethod(), this.getCallOptions()), request, responseObserver);
        }

        public void loadVoskModel(SpeechToTextDefinitions.LoadVoskModelRequest request, StreamObserver<SpeechToTextDefinitions.LoadVoskModelResponse> responseObserver) {
            ClientCalls.asyncUnaryCall(this.getChannel().newCall(SpeechToTextGrpc.getLoadVoskModelMethod(), this.getCallOptions()), request, responseObserver);
        }

        public void unloadVoskModel(SpeechToTextDefinitions.LoadVoskModelRequest request, StreamObserver<SpeechToTextDefinitions.LoadVoskModelResponse> responseObserver) {
            ClientCalls.asyncUnaryCall(this.getChannel().newCall(SpeechToTextGrpc.getUnloadVoskModelMethod(), this.getCallOptions()), request, responseObserver);
        }
    }

    public abstract static class SpeechToTextImplBase implements BindableService {
        public SpeechToTextImplBase() {
        }

        public void openChannel(SpeechToTextDefinitions.OpenChannelRequest request, StreamObserver<SpeechToTextDefinitions.SpeechToTextMessage> responseObserver) {
            ServerCalls.asyncUnimplementedUnaryCall(SpeechToTextGrpc.getOpenChannelMethod(), responseObserver);
        }

        public void subscribeToSpeechToText(SpeechToTextDefinitions.SpeechToTextSubscriptionRequest request, StreamObserver<SpeechToTextDefinitions.SpeechToTextSubscriptionResponse> responseObserver) {
            ServerCalls.asyncUnimplementedUnaryCall(SpeechToTextGrpc.getSubscribeToSpeechToTextMethod(), responseObserver);
        }

        public void unsubscribeFromSpeechToText(SpeechToTextDefinitions.SpeechToTextUnsubscriptionRequest request, StreamObserver<SpeechToTextDefinitions.SpeechToTextUnsubscriptionResponse> responseObserver) {
            ServerCalls.asyncUnimplementedUnaryCall(SpeechToTextGrpc.getUnsubscribeFromSpeechToTextMethod(), responseObserver);
        }

        public void loadVoskModel(SpeechToTextDefinitions.LoadVoskModelRequest request, StreamObserver<SpeechToTextDefinitions.LoadVoskModelResponse> responseObserver) {
            ServerCalls.asyncUnimplementedUnaryCall(SpeechToTextGrpc.getLoadVoskModelMethod(), responseObserver);
        }

        public void unloadVoskModel(SpeechToTextDefinitions.LoadVoskModelRequest request, StreamObserver<SpeechToTextDefinitions.LoadVoskModelResponse> responseObserver) {
            ServerCalls.asyncUnimplementedUnaryCall(SpeechToTextGrpc.getUnloadVoskModelMethod(), responseObserver);
        }

        public final ServerServiceDefinition bindService() {
            return ServerServiceDefinition.builder(SpeechToTextGrpc.getServiceDescriptor()).addMethod(SpeechToTextGrpc.getOpenChannelMethod(), ServerCalls.asyncServerStreamingCall(new MethodHandlers(this, 0))).addMethod(SpeechToTextGrpc.getSubscribeToSpeechToTextMethod(), ServerCalls.asyncUnaryCall(new MethodHandlers(this, 1))).addMethod(SpeechToTextGrpc.getUnsubscribeFromSpeechToTextMethod(), ServerCalls.asyncUnaryCall(new MethodHandlers(this, 2))).addMethod(SpeechToTextGrpc.getLoadVoskModelMethod(), ServerCalls.asyncUnaryCall(new MethodHandlers(this, 3))).addMethod(SpeechToTextGrpc.getUnloadVoskModelMethod(), ServerCalls.asyncUnaryCall(new MethodHandlers(this, 4))).build();
        }
    }
}
